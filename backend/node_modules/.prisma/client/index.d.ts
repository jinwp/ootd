
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model user
 * 
 */
export type user = $Result.DefaultSelection<Prisma.$userPayload>
/**
 * Model posting
 * 
 */
export type posting = $Result.DefaultSelection<Prisma.$postingPayload>
/**
 * Model Image
 * 
 */
export type Image = $Result.DefaultSelection<Prisma.$ImagePayload>
/**
 * Model chatRoom
 * 
 */
export type chatRoom = $Result.DefaultSelection<Prisma.$chatRoomPayload>
/**
 * Model message
 * 
 */
export type message = $Result.DefaultSelection<Prisma.$messagePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **user** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.userDelegate<ExtArgs>;

  /**
   * `prisma.posting`: Exposes CRUD operations for the **posting** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Postings
    * const postings = await prisma.posting.findMany()
    * ```
    */
  get posting(): Prisma.postingDelegate<ExtArgs>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<ExtArgs>;

  /**
   * `prisma.chatRoom`: Exposes CRUD operations for the **chatRoom** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ChatRooms
    * const chatRooms = await prisma.chatRoom.findMany()
    * ```
    */
  get chatRoom(): Prisma.chatRoomDelegate<ExtArgs>;

  /**
   * `prisma.message`: Exposes CRUD operations for the **message** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Messages
    * const messages = await prisma.message.findMany()
    * ```
    */
  get message(): Prisma.messageDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    user: 'user',
    posting: 'posting',
    Image: 'Image',
    chatRoom: 'chatRoom',
    message: 'message'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "posting" | "image" | "chatRoom" | "message"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      user: {
        payload: Prisma.$userPayload<ExtArgs>
        fields: Prisma.userFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findFirst: {
            args: Prisma.userFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          findMany: {
            args: Prisma.userFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>[]
          }
          create: {
            args: Prisma.userCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          createMany: {
            args: Prisma.userCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.userDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          update: {
            args: Prisma.userUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          deleteMany: {
            args: Prisma.userDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.userUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.userUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$userPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.userGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.userCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      posting: {
        payload: Prisma.$postingPayload<ExtArgs>
        fields: Prisma.postingFieldRefs
        operations: {
          findUnique: {
            args: Prisma.postingFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postingPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.postingFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postingPayload>
          }
          findFirst: {
            args: Prisma.postingFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postingPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.postingFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postingPayload>
          }
          findMany: {
            args: Prisma.postingFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postingPayload>[]
          }
          create: {
            args: Prisma.postingCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postingPayload>
          }
          createMany: {
            args: Prisma.postingCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.postingDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postingPayload>
          }
          update: {
            args: Prisma.postingUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postingPayload>
          }
          deleteMany: {
            args: Prisma.postingDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.postingUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.postingUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$postingPayload>
          }
          aggregate: {
            args: Prisma.PostingAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePosting>
          }
          groupBy: {
            args: Prisma.postingGroupByArgs<ExtArgs>
            result: $Utils.Optional<PostingGroupByOutputType>[]
          }
          count: {
            args: Prisma.postingCountArgs<ExtArgs>
            result: $Utils.Optional<PostingCountAggregateOutputType> | number
          }
        }
      }
      Image: {
        payload: Prisma.$ImagePayload<ExtArgs>
        fields: Prisma.ImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findFirst: {
            args: Prisma.ImageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findMany: {
            args: Prisma.ImageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          create: {
            args: Prisma.ImageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          createMany: {
            args: Prisma.ImageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ImageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          update: {
            args: Prisma.ImageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          deleteMany: {
            args: Prisma.ImageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ImageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ImageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          aggregate: {
            args: Prisma.ImageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImage>
          }
          groupBy: {
            args: Prisma.ImageGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImageCountArgs<ExtArgs>
            result: $Utils.Optional<ImageCountAggregateOutputType> | number
          }
        }
      }
      chatRoom: {
        payload: Prisma.$chatRoomPayload<ExtArgs>
        fields: Prisma.chatRoomFieldRefs
        operations: {
          findUnique: {
            args: Prisma.chatRoomFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chatRoomPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.chatRoomFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chatRoomPayload>
          }
          findFirst: {
            args: Prisma.chatRoomFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chatRoomPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.chatRoomFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chatRoomPayload>
          }
          findMany: {
            args: Prisma.chatRoomFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chatRoomPayload>[]
          }
          create: {
            args: Prisma.chatRoomCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chatRoomPayload>
          }
          createMany: {
            args: Prisma.chatRoomCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.chatRoomDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chatRoomPayload>
          }
          update: {
            args: Prisma.chatRoomUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chatRoomPayload>
          }
          deleteMany: {
            args: Prisma.chatRoomDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.chatRoomUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.chatRoomUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$chatRoomPayload>
          }
          aggregate: {
            args: Prisma.ChatRoomAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateChatRoom>
          }
          groupBy: {
            args: Prisma.chatRoomGroupByArgs<ExtArgs>
            result: $Utils.Optional<ChatRoomGroupByOutputType>[]
          }
          count: {
            args: Prisma.chatRoomCountArgs<ExtArgs>
            result: $Utils.Optional<ChatRoomCountAggregateOutputType> | number
          }
        }
      }
      message: {
        payload: Prisma.$messagePayload<ExtArgs>
        fields: Prisma.messageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.messageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.messageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          findFirst: {
            args: Prisma.messageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.messageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          findMany: {
            args: Prisma.messageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>[]
          }
          create: {
            args: Prisma.messageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          createMany: {
            args: Prisma.messageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.messageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          update: {
            args: Prisma.messageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          deleteMany: {
            args: Prisma.messageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.messageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.messageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$messagePayload>
          }
          aggregate: {
            args: Prisma.MessageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateMessage>
          }
          groupBy: {
            args: Prisma.messageGroupByArgs<ExtArgs>
            result: $Utils.Optional<MessageGroupByOutputType>[]
          }
          count: {
            args: Prisma.messageCountArgs<ExtArgs>
            result: $Utils.Optional<MessageCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    postings: number
    messages: number
    chatRoomAsFirstUser: number
    chatRoomAsSecondUser: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    postings?: boolean | UserCountOutputTypeCountPostingsArgs
    messages?: boolean | UserCountOutputTypeCountMessagesArgs
    chatRoomAsFirstUser?: boolean | UserCountOutputTypeCountChatRoomAsFirstUserArgs
    chatRoomAsSecondUser?: boolean | UserCountOutputTypeCountChatRoomAsSecondUserArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: postingWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: messageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatRoomAsFirstUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: chatRoomWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountChatRoomAsSecondUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: chatRoomWhereInput
  }


  /**
   * Count Type PostingCountOutputType
   */

  export type PostingCountOutputType = {
    images: number
  }

  export type PostingCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    images?: boolean | PostingCountOutputTypeCountImagesArgs
  }

  // Custom InputTypes
  /**
   * PostingCountOutputType without action
   */
  export type PostingCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostingCountOutputType
     */
    select?: PostingCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostingCountOutputType without action
   */
  export type PostingCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
  }


  /**
   * Count Type ImageCountOutputType
   */

  export type ImageCountOutputType = {
    posting: number
  }

  export type ImageCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posting?: boolean | ImageCountOutputTypeCountPostingArgs
  }

  // Custom InputTypes
  /**
   * ImageCountOutputType without action
   */
  export type ImageCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ImageCountOutputType
     */
    select?: ImageCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ImageCountOutputType without action
   */
  export type ImageCountOutputTypeCountPostingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: postingWhereInput
  }


  /**
   * Count Type ChatRoomCountOutputType
   */

  export type ChatRoomCountOutputType = {
    messages: number
  }

  export type ChatRoomCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    messages?: boolean | ChatRoomCountOutputTypeCountMessagesArgs
  }

  // Custom InputTypes
  /**
   * ChatRoomCountOutputType without action
   */
  export type ChatRoomCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ChatRoomCountOutputType
     */
    select?: ChatRoomCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ChatRoomCountOutputType without action
   */
  export type ChatRoomCountOutputTypeCountMessagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: messageWhereInput
  }


  /**
   * Models
   */

  /**
   * Model user
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    height: number | null
    weight: number | null
  }

  export type UserSumAggregateOutputType = {
    height: number | null
    weight: number | null
  }

  export type UserMinAggregateOutputType = {
    user_id: string | null
    email: string | null
    name: string | null
    password: string | null
    date_joined: Date | null
    height: number | null
    weight: number | null
  }

  export type UserMaxAggregateOutputType = {
    user_id: string | null
    email: string | null
    name: string | null
    password: string | null
    date_joined: Date | null
    height: number | null
    weight: number | null
  }

  export type UserCountAggregateOutputType = {
    user_id: number
    email: number
    name: number
    password: number
    date_joined: number
    height: number
    weight: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    height?: true
    weight?: true
  }

  export type UserSumAggregateInputType = {
    height?: true
    weight?: true
  }

  export type UserMinAggregateInputType = {
    user_id?: true
    email?: true
    name?: true
    password?: true
    date_joined?: true
    height?: true
    weight?: true
  }

  export type UserMaxAggregateInputType = {
    user_id?: true
    email?: true
    name?: true
    password?: true
    date_joined?: true
    height?: true
    weight?: true
  }

  export type UserCountAggregateInputType = {
    user_id?: true
    email?: true
    name?: true
    password?: true
    date_joined?: true
    height?: true
    weight?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which user to aggregate.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type userGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: userWhereInput
    orderBy?: userOrderByWithAggregationInput | userOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: userScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    user_id: string
    email: string
    name: string
    password: string
    date_joined: Date
    height: number
    weight: number
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends userGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type userSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    user_id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    date_joined?: boolean
    height?: boolean
    weight?: boolean
    postings?: boolean | user$postingsArgs<ExtArgs>
    messages?: boolean | user$messagesArgs<ExtArgs>
    chatRoomAsFirstUser?: boolean | user$chatRoomAsFirstUserArgs<ExtArgs>
    chatRoomAsSecondUser?: boolean | user$chatRoomAsSecondUserArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type userSelectScalar = {
    user_id?: boolean
    email?: boolean
    name?: boolean
    password?: boolean
    date_joined?: boolean
    height?: boolean
    weight?: boolean
  }

  export type userInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    postings?: boolean | user$postingsArgs<ExtArgs>
    messages?: boolean | user$messagesArgs<ExtArgs>
    chatRoomAsFirstUser?: boolean | user$chatRoomAsFirstUserArgs<ExtArgs>
    chatRoomAsSecondUser?: boolean | user$chatRoomAsSecondUserArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $userPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "user"
    objects: {
      postings: Prisma.$postingPayload<ExtArgs>[]
      messages: Prisma.$messagePayload<ExtArgs>[]
      chatRoomAsFirstUser: Prisma.$chatRoomPayload<ExtArgs>[]
      chatRoomAsSecondUser: Prisma.$chatRoomPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      user_id: string
      email: string
      name: string
      password: string
      date_joined: Date
      height: number
      weight: number
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type userGetPayload<S extends boolean | null | undefined | userDefaultArgs> = $Result.GetResult<Prisma.$userPayload, S>

  type userCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<userFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface userDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['user'], meta: { name: 'user' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {userFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends userFindUniqueArgs>(args: SelectSubset<T, userFindUniqueArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {userFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends userFindUniqueOrThrowArgs>(args: SelectSubset<T, userFindUniqueOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends userFindFirstArgs>(args?: SelectSubset<T, userFindFirstArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends userFindFirstOrThrowArgs>(args?: SelectSubset<T, userFindFirstOrThrowArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `user_id`
     * const userWithUser_idOnly = await prisma.user.findMany({ select: { user_id: true } })
     * 
     */
    findMany<T extends userFindManyArgs>(args?: SelectSubset<T, userFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {userCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends userCreateArgs>(args: SelectSubset<T, userCreateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {userCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends userCreateManyArgs>(args?: SelectSubset<T, userCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {userDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends userDeleteArgs>(args: SelectSubset<T, userDeleteArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {userUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends userUpdateArgs>(args: SelectSubset<T, userUpdateArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {userDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends userDeleteManyArgs>(args?: SelectSubset<T, userDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends userUpdateManyArgs>(args: SelectSubset<T, userUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {userUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends userUpsertArgs>(args: SelectSubset<T, userUpsertArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends userCountArgs>(
      args?: Subset<T, userCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userGroupByArgs['orderBy'] }
        : { orderBy?: userGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the user model
   */
  readonly fields: userFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for user.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    postings<T extends user$postingsArgs<ExtArgs> = {}>(args?: Subset<T, user$postingsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$postingPayload<ExtArgs>, T, "findMany"> | Null>
    messages<T extends user$messagesArgs<ExtArgs> = {}>(args?: Subset<T, user$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findMany"> | Null>
    chatRoomAsFirstUser<T extends user$chatRoomAsFirstUserArgs<ExtArgs> = {}>(args?: Subset<T, user$chatRoomAsFirstUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$chatRoomPayload<ExtArgs>, T, "findMany"> | Null>
    chatRoomAsSecondUser<T extends user$chatRoomAsSecondUserArgs<ExtArgs> = {}>(args?: Subset<T, user$chatRoomAsSecondUserArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$chatRoomPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the user model
   */ 
  interface userFieldRefs {
    readonly user_id: FieldRef<"user", 'String'>
    readonly email: FieldRef<"user", 'String'>
    readonly name: FieldRef<"user", 'String'>
    readonly password: FieldRef<"user", 'String'>
    readonly date_joined: FieldRef<"user", 'DateTime'>
    readonly height: FieldRef<"user", 'Int'>
    readonly weight: FieldRef<"user", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * user findUnique
   */
  export type userFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findUniqueOrThrow
   */
  export type userFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where: userWhereUniqueInput
  }

  /**
   * user findFirst
   */
  export type userFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findFirstOrThrow
   */
  export type userFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which user to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user findMany
   */
  export type userFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: userWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: userOrderByWithRelationInput | userOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: userWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * user create
   */
  export type userCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to create a user.
     */
    data: XOR<userCreateInput, userUncheckedCreateInput>
  }

  /**
   * user createMany
   */
  export type userCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: userCreateManyInput | userCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * user update
   */
  export type userUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The data needed to update a user.
     */
    data: XOR<userUpdateInput, userUncheckedUpdateInput>
    /**
     * Choose, which user to update.
     */
    where: userWhereUniqueInput
  }

  /**
   * user updateMany
   */
  export type userUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<userUpdateManyMutationInput, userUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: userWhereInput
  }

  /**
   * user upsert
   */
  export type userUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * The filter to search for the user to update in case it exists.
     */
    where: userWhereUniqueInput
    /**
     * In case the user found by the `where` argument doesn't exist, create a new user with this data.
     */
    create: XOR<userCreateInput, userUncheckedCreateInput>
    /**
     * In case the user was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userUpdateInput, userUncheckedUpdateInput>
  }

  /**
   * user delete
   */
  export type userDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
    /**
     * Filter which user to delete.
     */
    where: userWhereUniqueInput
  }

  /**
   * user deleteMany
   */
  export type userDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: userWhereInput
  }

  /**
   * user.postings
   */
  export type user$postingsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posting
     */
    select?: postingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postingInclude<ExtArgs> | null
    where?: postingWhereInput
    orderBy?: postingOrderByWithRelationInput | postingOrderByWithRelationInput[]
    cursor?: postingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostingScalarFieldEnum | PostingScalarFieldEnum[]
  }

  /**
   * user.messages
   */
  export type user$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    where?: messageWhereInput
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    cursor?: messageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * user.chatRoomAsFirstUser
   */
  export type user$chatRoomAsFirstUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chatRoom
     */
    select?: chatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatRoomInclude<ExtArgs> | null
    where?: chatRoomWhereInput
    orderBy?: chatRoomOrderByWithRelationInput | chatRoomOrderByWithRelationInput[]
    cursor?: chatRoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * user.chatRoomAsSecondUser
   */
  export type user$chatRoomAsSecondUserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chatRoom
     */
    select?: chatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatRoomInclude<ExtArgs> | null
    where?: chatRoomWhereInput
    orderBy?: chatRoomOrderByWithRelationInput | chatRoomOrderByWithRelationInput[]
    cursor?: chatRoomWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * user without action
   */
  export type userDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the user
     */
    select?: userSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: userInclude<ExtArgs> | null
  }


  /**
   * Model posting
   */

  export type AggregatePosting = {
    _count: PostingCountAggregateOutputType | null
    _min: PostingMinAggregateOutputType | null
    _max: PostingMaxAggregateOutputType | null
  }

  export type PostingMinAggregateOutputType = {
    post_id: string | null
    user_id: string | null
    text: string | null
    date_created: Date | null
    semester: string | null
  }

  export type PostingMaxAggregateOutputType = {
    post_id: string | null
    user_id: string | null
    text: string | null
    date_created: Date | null
    semester: string | null
  }

  export type PostingCountAggregateOutputType = {
    post_id: number
    user_id: number
    text: number
    date_created: number
    semester: number
    _all: number
  }


  export type PostingMinAggregateInputType = {
    post_id?: true
    user_id?: true
    text?: true
    date_created?: true
    semester?: true
  }

  export type PostingMaxAggregateInputType = {
    post_id?: true
    user_id?: true
    text?: true
    date_created?: true
    semester?: true
  }

  export type PostingCountAggregateInputType = {
    post_id?: true
    user_id?: true
    text?: true
    date_created?: true
    semester?: true
    _all?: true
  }

  export type PostingAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which posting to aggregate.
     */
    where?: postingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of postings to fetch.
     */
    orderBy?: postingOrderByWithRelationInput | postingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: postingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` postings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` postings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned postings
    **/
    _count?: true | PostingCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostingMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostingMaxAggregateInputType
  }

  export type GetPostingAggregateType<T extends PostingAggregateArgs> = {
        [P in keyof T & keyof AggregatePosting]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePosting[P]>
      : GetScalarType<T[P], AggregatePosting[P]>
  }




  export type postingGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: postingWhereInput
    orderBy?: postingOrderByWithAggregationInput | postingOrderByWithAggregationInput[]
    by: PostingScalarFieldEnum[] | PostingScalarFieldEnum
    having?: postingScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostingCountAggregateInputType | true
    _min?: PostingMinAggregateInputType
    _max?: PostingMaxAggregateInputType
  }

  export type PostingGroupByOutputType = {
    post_id: string
    user_id: string
    text: string
    date_created: Date
    semester: string | null
    _count: PostingCountAggregateOutputType | null
    _min: PostingMinAggregateOutputType | null
    _max: PostingMaxAggregateOutputType | null
  }

  type GetPostingGroupByPayload<T extends postingGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostingGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostingGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostingGroupByOutputType[P]>
            : GetScalarType<T[P], PostingGroupByOutputType[P]>
        }
      >
    >


  export type postingSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    post_id?: boolean
    user_id?: boolean
    text?: boolean
    date_created?: boolean
    semester?: boolean
    uploader?: boolean | userDefaultArgs<ExtArgs>
    images?: boolean | posting$imagesArgs<ExtArgs>
    _count?: boolean | PostingCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["posting"]>


  export type postingSelectScalar = {
    post_id?: boolean
    user_id?: boolean
    text?: boolean
    date_created?: boolean
    semester?: boolean
  }

  export type postingInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    uploader?: boolean | userDefaultArgs<ExtArgs>
    images?: boolean | posting$imagesArgs<ExtArgs>
    _count?: boolean | PostingCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $postingPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "posting"
    objects: {
      uploader: Prisma.$userPayload<ExtArgs>
      images: Prisma.$ImagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      post_id: string
      user_id: string
      text: string
      date_created: Date
      semester: string | null
    }, ExtArgs["result"]["posting"]>
    composites: {}
  }

  type postingGetPayload<S extends boolean | null | undefined | postingDefaultArgs> = $Result.GetResult<Prisma.$postingPayload, S>

  type postingCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<postingFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PostingCountAggregateInputType | true
    }

  export interface postingDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['posting'], meta: { name: 'posting' } }
    /**
     * Find zero or one Posting that matches the filter.
     * @param {postingFindUniqueArgs} args - Arguments to find a Posting
     * @example
     * // Get one Posting
     * const posting = await prisma.posting.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends postingFindUniqueArgs>(args: SelectSubset<T, postingFindUniqueArgs<ExtArgs>>): Prisma__postingClient<$Result.GetResult<Prisma.$postingPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Posting that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {postingFindUniqueOrThrowArgs} args - Arguments to find a Posting
     * @example
     * // Get one Posting
     * const posting = await prisma.posting.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends postingFindUniqueOrThrowArgs>(args: SelectSubset<T, postingFindUniqueOrThrowArgs<ExtArgs>>): Prisma__postingClient<$Result.GetResult<Prisma.$postingPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Posting that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postingFindFirstArgs} args - Arguments to find a Posting
     * @example
     * // Get one Posting
     * const posting = await prisma.posting.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends postingFindFirstArgs>(args?: SelectSubset<T, postingFindFirstArgs<ExtArgs>>): Prisma__postingClient<$Result.GetResult<Prisma.$postingPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Posting that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postingFindFirstOrThrowArgs} args - Arguments to find a Posting
     * @example
     * // Get one Posting
     * const posting = await prisma.posting.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends postingFindFirstOrThrowArgs>(args?: SelectSubset<T, postingFindFirstOrThrowArgs<ExtArgs>>): Prisma__postingClient<$Result.GetResult<Prisma.$postingPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Postings that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postingFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Postings
     * const postings = await prisma.posting.findMany()
     * 
     * // Get first 10 Postings
     * const postings = await prisma.posting.findMany({ take: 10 })
     * 
     * // Only select the `post_id`
     * const postingWithPost_idOnly = await prisma.posting.findMany({ select: { post_id: true } })
     * 
     */
    findMany<T extends postingFindManyArgs>(args?: SelectSubset<T, postingFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$postingPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Posting.
     * @param {postingCreateArgs} args - Arguments to create a Posting.
     * @example
     * // Create one Posting
     * const Posting = await prisma.posting.create({
     *   data: {
     *     // ... data to create a Posting
     *   }
     * })
     * 
     */
    create<T extends postingCreateArgs>(args: SelectSubset<T, postingCreateArgs<ExtArgs>>): Prisma__postingClient<$Result.GetResult<Prisma.$postingPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Postings.
     * @param {postingCreateManyArgs} args - Arguments to create many Postings.
     * @example
     * // Create many Postings
     * const posting = await prisma.posting.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends postingCreateManyArgs>(args?: SelectSubset<T, postingCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Posting.
     * @param {postingDeleteArgs} args - Arguments to delete one Posting.
     * @example
     * // Delete one Posting
     * const Posting = await prisma.posting.delete({
     *   where: {
     *     // ... filter to delete one Posting
     *   }
     * })
     * 
     */
    delete<T extends postingDeleteArgs>(args: SelectSubset<T, postingDeleteArgs<ExtArgs>>): Prisma__postingClient<$Result.GetResult<Prisma.$postingPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Posting.
     * @param {postingUpdateArgs} args - Arguments to update one Posting.
     * @example
     * // Update one Posting
     * const posting = await prisma.posting.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends postingUpdateArgs>(args: SelectSubset<T, postingUpdateArgs<ExtArgs>>): Prisma__postingClient<$Result.GetResult<Prisma.$postingPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Postings.
     * @param {postingDeleteManyArgs} args - Arguments to filter Postings to delete.
     * @example
     * // Delete a few Postings
     * const { count } = await prisma.posting.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends postingDeleteManyArgs>(args?: SelectSubset<T, postingDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Postings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postingUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Postings
     * const posting = await prisma.posting.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends postingUpdateManyArgs>(args: SelectSubset<T, postingUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Posting.
     * @param {postingUpsertArgs} args - Arguments to update or create a Posting.
     * @example
     * // Update or create a Posting
     * const posting = await prisma.posting.upsert({
     *   create: {
     *     // ... data to create a Posting
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Posting we want to update
     *   }
     * })
     */
    upsert<T extends postingUpsertArgs>(args: SelectSubset<T, postingUpsertArgs<ExtArgs>>): Prisma__postingClient<$Result.GetResult<Prisma.$postingPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Postings.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postingCountArgs} args - Arguments to filter Postings to count.
     * @example
     * // Count the number of Postings
     * const count = await prisma.posting.count({
     *   where: {
     *     // ... the filter for the Postings we want to count
     *   }
     * })
    **/
    count<T extends postingCountArgs>(
      args?: Subset<T, postingCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostingCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Posting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostingAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostingAggregateArgs>(args: Subset<T, PostingAggregateArgs>): Prisma.PrismaPromise<GetPostingAggregateType<T>>

    /**
     * Group by Posting.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {postingGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends postingGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: postingGroupByArgs['orderBy'] }
        : { orderBy?: postingGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, postingGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostingGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the posting model
   */
  readonly fields: postingFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for posting.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__postingClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    uploader<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    images<T extends posting$imagesArgs<ExtArgs> = {}>(args?: Subset<T, posting$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the posting model
   */ 
  interface postingFieldRefs {
    readonly post_id: FieldRef<"posting", 'String'>
    readonly user_id: FieldRef<"posting", 'String'>
    readonly text: FieldRef<"posting", 'String'>
    readonly date_created: FieldRef<"posting", 'DateTime'>
    readonly semester: FieldRef<"posting", 'String'>
  }
    

  // Custom InputTypes
  /**
   * posting findUnique
   */
  export type postingFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posting
     */
    select?: postingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postingInclude<ExtArgs> | null
    /**
     * Filter, which posting to fetch.
     */
    where: postingWhereUniqueInput
  }

  /**
   * posting findUniqueOrThrow
   */
  export type postingFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posting
     */
    select?: postingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postingInclude<ExtArgs> | null
    /**
     * Filter, which posting to fetch.
     */
    where: postingWhereUniqueInput
  }

  /**
   * posting findFirst
   */
  export type postingFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posting
     */
    select?: postingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postingInclude<ExtArgs> | null
    /**
     * Filter, which posting to fetch.
     */
    where?: postingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of postings to fetch.
     */
    orderBy?: postingOrderByWithRelationInput | postingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for postings.
     */
    cursor?: postingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` postings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` postings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of postings.
     */
    distinct?: PostingScalarFieldEnum | PostingScalarFieldEnum[]
  }

  /**
   * posting findFirstOrThrow
   */
  export type postingFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posting
     */
    select?: postingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postingInclude<ExtArgs> | null
    /**
     * Filter, which posting to fetch.
     */
    where?: postingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of postings to fetch.
     */
    orderBy?: postingOrderByWithRelationInput | postingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for postings.
     */
    cursor?: postingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` postings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` postings.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of postings.
     */
    distinct?: PostingScalarFieldEnum | PostingScalarFieldEnum[]
  }

  /**
   * posting findMany
   */
  export type postingFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posting
     */
    select?: postingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postingInclude<ExtArgs> | null
    /**
     * Filter, which postings to fetch.
     */
    where?: postingWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of postings to fetch.
     */
    orderBy?: postingOrderByWithRelationInput | postingOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing postings.
     */
    cursor?: postingWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` postings from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` postings.
     */
    skip?: number
    distinct?: PostingScalarFieldEnum | PostingScalarFieldEnum[]
  }

  /**
   * posting create
   */
  export type postingCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posting
     */
    select?: postingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postingInclude<ExtArgs> | null
    /**
     * The data needed to create a posting.
     */
    data: XOR<postingCreateInput, postingUncheckedCreateInput>
  }

  /**
   * posting createMany
   */
  export type postingCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many postings.
     */
    data: postingCreateManyInput | postingCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * posting update
   */
  export type postingUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posting
     */
    select?: postingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postingInclude<ExtArgs> | null
    /**
     * The data needed to update a posting.
     */
    data: XOR<postingUpdateInput, postingUncheckedUpdateInput>
    /**
     * Choose, which posting to update.
     */
    where: postingWhereUniqueInput
  }

  /**
   * posting updateMany
   */
  export type postingUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update postings.
     */
    data: XOR<postingUpdateManyMutationInput, postingUncheckedUpdateManyInput>
    /**
     * Filter which postings to update
     */
    where?: postingWhereInput
  }

  /**
   * posting upsert
   */
  export type postingUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posting
     */
    select?: postingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postingInclude<ExtArgs> | null
    /**
     * The filter to search for the posting to update in case it exists.
     */
    where: postingWhereUniqueInput
    /**
     * In case the posting found by the `where` argument doesn't exist, create a new posting with this data.
     */
    create: XOR<postingCreateInput, postingUncheckedCreateInput>
    /**
     * In case the posting was found with the provided `where` argument, update it with this data.
     */
    update: XOR<postingUpdateInput, postingUncheckedUpdateInput>
  }

  /**
   * posting delete
   */
  export type postingDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posting
     */
    select?: postingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postingInclude<ExtArgs> | null
    /**
     * Filter which posting to delete.
     */
    where: postingWhereUniqueInput
  }

  /**
   * posting deleteMany
   */
  export type postingDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which postings to delete
     */
    where?: postingWhereInput
  }

  /**
   * posting.images
   */
  export type posting$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    cursor?: ImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * posting without action
   */
  export type postingDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posting
     */
    select?: postingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postingInclude<ExtArgs> | null
  }


  /**
   * Model Image
   */

  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageMinAggregateOutputType = {
    id: string | null
    imageUrl: string | null
  }

  export type ImageMaxAggregateOutputType = {
    id: string | null
    imageUrl: string | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    imageUrl: number
    _all: number
  }


  export type ImageMinAggregateInputType = {
    id?: true
    imageUrl?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    imageUrl?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    imageUrl?: true
    _all?: true
  }

  export type ImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Image to aggregate.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithAggregationInput | ImageOrderByWithAggregationInput[]
    by: ImageScalarFieldEnum[] | ImageScalarFieldEnum
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }

  export type ImageGroupByOutputType = {
    id: string
    imageUrl: string
    _count: ImageCountAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    imageUrl?: boolean
    posting?: boolean | Image$postingArgs<ExtArgs>
    _count?: boolean | ImageCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>


  export type ImageSelectScalar = {
    id?: boolean
    imageUrl?: boolean
  }

  export type ImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posting?: boolean | Image$postingArgs<ExtArgs>
    _count?: boolean | ImageCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $ImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Image"
    objects: {
      posting: Prisma.$postingPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      imageUrl: string
    }, ExtArgs["result"]["image"]>
    composites: {}
  }

  type ImageGetPayload<S extends boolean | null | undefined | ImageDefaultArgs> = $Result.GetResult<Prisma.$ImagePayload, S>

  type ImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ImageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ImageCountAggregateInputType | true
    }

  export interface ImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Image'], meta: { name: 'Image' } }
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ImageFindUniqueArgs>(args: SelectSubset<T, ImageFindUniqueArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Image that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs>(args: SelectSubset<T, ImageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ImageFindFirstArgs>(args?: SelectSubset<T, ImageFindFirstArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ImageFindFirstOrThrowArgs>(args?: SelectSubset<T, ImageFindFirstOrThrowArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ImageFindManyArgs>(args?: SelectSubset<T, ImageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
     */
    create<T extends ImageCreateArgs>(args: SelectSubset<T, ImageCreateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Images.
     * @param {ImageCreateManyArgs} args - Arguments to create many Images.
     * @example
     * // Create many Images
     * const image = await prisma.image.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ImageCreateManyArgs>(args?: SelectSubset<T, ImageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
     */
    delete<T extends ImageDeleteArgs>(args: SelectSubset<T, ImageDeleteArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ImageUpdateArgs>(args: SelectSubset<T, ImageUpdateArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ImageDeleteManyArgs>(args?: SelectSubset<T, ImageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ImageUpdateManyArgs>(args: SelectSubset<T, ImageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
     */
    upsert<T extends ImageUpsertArgs>(args: SelectSubset<T, ImageUpsertArgs<ExtArgs>>): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Image model
   */
  readonly fields: ImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    posting<T extends Image$postingArgs<ExtArgs> = {}>(args?: Subset<T, Image$postingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$postingPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Image model
   */ 
  interface ImageFieldRefs {
    readonly id: FieldRef<"Image", 'String'>
    readonly imageUrl: FieldRef<"Image", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findUniqueOrThrow
   */
  export type ImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findFirstOrThrow
   */
  export type ImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findMany
   */
  export type ImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image create
   */
  export type ImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to create a Image.
     */
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }

  /**
   * Image createMany
   */
  export type ImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Image update
   */
  export type ImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to update a Image.
     */
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
  }

  /**
   * Image upsert
   */
  export type ImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The filter to search for the Image to update in case it exists.
     */
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     */
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }

  /**
   * Image delete
   */
  export type ImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter which Image to delete.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to delete
     */
    where?: ImageWhereInput
  }

  /**
   * Image.posting
   */
  export type Image$postingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the posting
     */
    select?: postingSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: postingInclude<ExtArgs> | null
    where?: postingWhereInput
    orderBy?: postingOrderByWithRelationInput | postingOrderByWithRelationInput[]
    cursor?: postingWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostingScalarFieldEnum | PostingScalarFieldEnum[]
  }

  /**
   * Image without action
   */
  export type ImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
  }


  /**
   * Model chatRoom
   */

  export type AggregateChatRoom = {
    _count: ChatRoomCountAggregateOutputType | null
    _min: ChatRoomMinAggregateOutputType | null
    _max: ChatRoomMaxAggregateOutputType | null
  }

  export type ChatRoomMinAggregateOutputType = {
    room_id: string | null
    first_user_id: string | null
    second_user_id: string | null
  }

  export type ChatRoomMaxAggregateOutputType = {
    room_id: string | null
    first_user_id: string | null
    second_user_id: string | null
  }

  export type ChatRoomCountAggregateOutputType = {
    room_id: number
    first_user_id: number
    second_user_id: number
    _all: number
  }


  export type ChatRoomMinAggregateInputType = {
    room_id?: true
    first_user_id?: true
    second_user_id?: true
  }

  export type ChatRoomMaxAggregateInputType = {
    room_id?: true
    first_user_id?: true
    second_user_id?: true
  }

  export type ChatRoomCountAggregateInputType = {
    room_id?: true
    first_user_id?: true
    second_user_id?: true
    _all?: true
  }

  export type ChatRoomAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which chatRoom to aggregate.
     */
    where?: chatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chatRooms to fetch.
     */
    orderBy?: chatRoomOrderByWithRelationInput | chatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: chatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned chatRooms
    **/
    _count?: true | ChatRoomCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ChatRoomMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ChatRoomMaxAggregateInputType
  }

  export type GetChatRoomAggregateType<T extends ChatRoomAggregateArgs> = {
        [P in keyof T & keyof AggregateChatRoom]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateChatRoom[P]>
      : GetScalarType<T[P], AggregateChatRoom[P]>
  }




  export type chatRoomGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: chatRoomWhereInput
    orderBy?: chatRoomOrderByWithAggregationInput | chatRoomOrderByWithAggregationInput[]
    by: ChatRoomScalarFieldEnum[] | ChatRoomScalarFieldEnum
    having?: chatRoomScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ChatRoomCountAggregateInputType | true
    _min?: ChatRoomMinAggregateInputType
    _max?: ChatRoomMaxAggregateInputType
  }

  export type ChatRoomGroupByOutputType = {
    room_id: string
    first_user_id: string
    second_user_id: string
    _count: ChatRoomCountAggregateOutputType | null
    _min: ChatRoomMinAggregateOutputType | null
    _max: ChatRoomMaxAggregateOutputType | null
  }

  type GetChatRoomGroupByPayload<T extends chatRoomGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ChatRoomGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ChatRoomGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ChatRoomGroupByOutputType[P]>
            : GetScalarType<T[P], ChatRoomGroupByOutputType[P]>
        }
      >
    >


  export type chatRoomSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    room_id?: boolean
    first_user_id?: boolean
    second_user_id?: boolean
    first_user?: boolean | userDefaultArgs<ExtArgs>
    second_user?: boolean | userDefaultArgs<ExtArgs>
    messages?: boolean | chatRoom$messagesArgs<ExtArgs>
    _count?: boolean | ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["chatRoom"]>


  export type chatRoomSelectScalar = {
    room_id?: boolean
    first_user_id?: boolean
    second_user_id?: boolean
  }

  export type chatRoomInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    first_user?: boolean | userDefaultArgs<ExtArgs>
    second_user?: boolean | userDefaultArgs<ExtArgs>
    messages?: boolean | chatRoom$messagesArgs<ExtArgs>
    _count?: boolean | ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $chatRoomPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "chatRoom"
    objects: {
      first_user: Prisma.$userPayload<ExtArgs>
      second_user: Prisma.$userPayload<ExtArgs>
      messages: Prisma.$messagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      room_id: string
      first_user_id: string
      second_user_id: string
    }, ExtArgs["result"]["chatRoom"]>
    composites: {}
  }

  type chatRoomGetPayload<S extends boolean | null | undefined | chatRoomDefaultArgs> = $Result.GetResult<Prisma.$chatRoomPayload, S>

  type chatRoomCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<chatRoomFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ChatRoomCountAggregateInputType | true
    }

  export interface chatRoomDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['chatRoom'], meta: { name: 'chatRoom' } }
    /**
     * Find zero or one ChatRoom that matches the filter.
     * @param {chatRoomFindUniqueArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends chatRoomFindUniqueArgs>(args: SelectSubset<T, chatRoomFindUniqueArgs<ExtArgs>>): Prisma__chatRoomClient<$Result.GetResult<Prisma.$chatRoomPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ChatRoom that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {chatRoomFindUniqueOrThrowArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends chatRoomFindUniqueOrThrowArgs>(args: SelectSubset<T, chatRoomFindUniqueOrThrowArgs<ExtArgs>>): Prisma__chatRoomClient<$Result.GetResult<Prisma.$chatRoomPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ChatRoom that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chatRoomFindFirstArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends chatRoomFindFirstArgs>(args?: SelectSubset<T, chatRoomFindFirstArgs<ExtArgs>>): Prisma__chatRoomClient<$Result.GetResult<Prisma.$chatRoomPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ChatRoom that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chatRoomFindFirstOrThrowArgs} args - Arguments to find a ChatRoom
     * @example
     * // Get one ChatRoom
     * const chatRoom = await prisma.chatRoom.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends chatRoomFindFirstOrThrowArgs>(args?: SelectSubset<T, chatRoomFindFirstOrThrowArgs<ExtArgs>>): Prisma__chatRoomClient<$Result.GetResult<Prisma.$chatRoomPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ChatRooms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chatRoomFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ChatRooms
     * const chatRooms = await prisma.chatRoom.findMany()
     * 
     * // Get first 10 ChatRooms
     * const chatRooms = await prisma.chatRoom.findMany({ take: 10 })
     * 
     * // Only select the `room_id`
     * const chatRoomWithRoom_idOnly = await prisma.chatRoom.findMany({ select: { room_id: true } })
     * 
     */
    findMany<T extends chatRoomFindManyArgs>(args?: SelectSubset<T, chatRoomFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$chatRoomPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ChatRoom.
     * @param {chatRoomCreateArgs} args - Arguments to create a ChatRoom.
     * @example
     * // Create one ChatRoom
     * const ChatRoom = await prisma.chatRoom.create({
     *   data: {
     *     // ... data to create a ChatRoom
     *   }
     * })
     * 
     */
    create<T extends chatRoomCreateArgs>(args: SelectSubset<T, chatRoomCreateArgs<ExtArgs>>): Prisma__chatRoomClient<$Result.GetResult<Prisma.$chatRoomPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ChatRooms.
     * @param {chatRoomCreateManyArgs} args - Arguments to create many ChatRooms.
     * @example
     * // Create many ChatRooms
     * const chatRoom = await prisma.chatRoom.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends chatRoomCreateManyArgs>(args?: SelectSubset<T, chatRoomCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ChatRoom.
     * @param {chatRoomDeleteArgs} args - Arguments to delete one ChatRoom.
     * @example
     * // Delete one ChatRoom
     * const ChatRoom = await prisma.chatRoom.delete({
     *   where: {
     *     // ... filter to delete one ChatRoom
     *   }
     * })
     * 
     */
    delete<T extends chatRoomDeleteArgs>(args: SelectSubset<T, chatRoomDeleteArgs<ExtArgs>>): Prisma__chatRoomClient<$Result.GetResult<Prisma.$chatRoomPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ChatRoom.
     * @param {chatRoomUpdateArgs} args - Arguments to update one ChatRoom.
     * @example
     * // Update one ChatRoom
     * const chatRoom = await prisma.chatRoom.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends chatRoomUpdateArgs>(args: SelectSubset<T, chatRoomUpdateArgs<ExtArgs>>): Prisma__chatRoomClient<$Result.GetResult<Prisma.$chatRoomPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ChatRooms.
     * @param {chatRoomDeleteManyArgs} args - Arguments to filter ChatRooms to delete.
     * @example
     * // Delete a few ChatRooms
     * const { count } = await prisma.chatRoom.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends chatRoomDeleteManyArgs>(args?: SelectSubset<T, chatRoomDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ChatRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chatRoomUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ChatRooms
     * const chatRoom = await prisma.chatRoom.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends chatRoomUpdateManyArgs>(args: SelectSubset<T, chatRoomUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ChatRoom.
     * @param {chatRoomUpsertArgs} args - Arguments to update or create a ChatRoom.
     * @example
     * // Update or create a ChatRoom
     * const chatRoom = await prisma.chatRoom.upsert({
     *   create: {
     *     // ... data to create a ChatRoom
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ChatRoom we want to update
     *   }
     * })
     */
    upsert<T extends chatRoomUpsertArgs>(args: SelectSubset<T, chatRoomUpsertArgs<ExtArgs>>): Prisma__chatRoomClient<$Result.GetResult<Prisma.$chatRoomPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ChatRooms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chatRoomCountArgs} args - Arguments to filter ChatRooms to count.
     * @example
     * // Count the number of ChatRooms
     * const count = await prisma.chatRoom.count({
     *   where: {
     *     // ... the filter for the ChatRooms we want to count
     *   }
     * })
    **/
    count<T extends chatRoomCountArgs>(
      args?: Subset<T, chatRoomCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ChatRoomCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ChatRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ChatRoomAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ChatRoomAggregateArgs>(args: Subset<T, ChatRoomAggregateArgs>): Prisma.PrismaPromise<GetChatRoomAggregateType<T>>

    /**
     * Group by ChatRoom.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {chatRoomGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends chatRoomGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: chatRoomGroupByArgs['orderBy'] }
        : { orderBy?: chatRoomGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, chatRoomGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetChatRoomGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the chatRoom model
   */
  readonly fields: chatRoomFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for chatRoom.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__chatRoomClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    first_user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    second_user<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    messages<T extends chatRoom$messagesArgs<ExtArgs> = {}>(args?: Subset<T, chatRoom$messagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the chatRoom model
   */ 
  interface chatRoomFieldRefs {
    readonly room_id: FieldRef<"chatRoom", 'String'>
    readonly first_user_id: FieldRef<"chatRoom", 'String'>
    readonly second_user_id: FieldRef<"chatRoom", 'String'>
  }
    

  // Custom InputTypes
  /**
   * chatRoom findUnique
   */
  export type chatRoomFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chatRoom
     */
    select?: chatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatRoomInclude<ExtArgs> | null
    /**
     * Filter, which chatRoom to fetch.
     */
    where: chatRoomWhereUniqueInput
  }

  /**
   * chatRoom findUniqueOrThrow
   */
  export type chatRoomFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chatRoom
     */
    select?: chatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatRoomInclude<ExtArgs> | null
    /**
     * Filter, which chatRoom to fetch.
     */
    where: chatRoomWhereUniqueInput
  }

  /**
   * chatRoom findFirst
   */
  export type chatRoomFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chatRoom
     */
    select?: chatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatRoomInclude<ExtArgs> | null
    /**
     * Filter, which chatRoom to fetch.
     */
    where?: chatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chatRooms to fetch.
     */
    orderBy?: chatRoomOrderByWithRelationInput | chatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chatRooms.
     */
    cursor?: chatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chatRooms.
     */
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * chatRoom findFirstOrThrow
   */
  export type chatRoomFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chatRoom
     */
    select?: chatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatRoomInclude<ExtArgs> | null
    /**
     * Filter, which chatRoom to fetch.
     */
    where?: chatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chatRooms to fetch.
     */
    orderBy?: chatRoomOrderByWithRelationInput | chatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for chatRooms.
     */
    cursor?: chatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chatRooms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of chatRooms.
     */
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * chatRoom findMany
   */
  export type chatRoomFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chatRoom
     */
    select?: chatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatRoomInclude<ExtArgs> | null
    /**
     * Filter, which chatRooms to fetch.
     */
    where?: chatRoomWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of chatRooms to fetch.
     */
    orderBy?: chatRoomOrderByWithRelationInput | chatRoomOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing chatRooms.
     */
    cursor?: chatRoomWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` chatRooms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` chatRooms.
     */
    skip?: number
    distinct?: ChatRoomScalarFieldEnum | ChatRoomScalarFieldEnum[]
  }

  /**
   * chatRoom create
   */
  export type chatRoomCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chatRoom
     */
    select?: chatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatRoomInclude<ExtArgs> | null
    /**
     * The data needed to create a chatRoom.
     */
    data: XOR<chatRoomCreateInput, chatRoomUncheckedCreateInput>
  }

  /**
   * chatRoom createMany
   */
  export type chatRoomCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many chatRooms.
     */
    data: chatRoomCreateManyInput | chatRoomCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * chatRoom update
   */
  export type chatRoomUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chatRoom
     */
    select?: chatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatRoomInclude<ExtArgs> | null
    /**
     * The data needed to update a chatRoom.
     */
    data: XOR<chatRoomUpdateInput, chatRoomUncheckedUpdateInput>
    /**
     * Choose, which chatRoom to update.
     */
    where: chatRoomWhereUniqueInput
  }

  /**
   * chatRoom updateMany
   */
  export type chatRoomUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update chatRooms.
     */
    data: XOR<chatRoomUpdateManyMutationInput, chatRoomUncheckedUpdateManyInput>
    /**
     * Filter which chatRooms to update
     */
    where?: chatRoomWhereInput
  }

  /**
   * chatRoom upsert
   */
  export type chatRoomUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chatRoom
     */
    select?: chatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatRoomInclude<ExtArgs> | null
    /**
     * The filter to search for the chatRoom to update in case it exists.
     */
    where: chatRoomWhereUniqueInput
    /**
     * In case the chatRoom found by the `where` argument doesn't exist, create a new chatRoom with this data.
     */
    create: XOR<chatRoomCreateInput, chatRoomUncheckedCreateInput>
    /**
     * In case the chatRoom was found with the provided `where` argument, update it with this data.
     */
    update: XOR<chatRoomUpdateInput, chatRoomUncheckedUpdateInput>
  }

  /**
   * chatRoom delete
   */
  export type chatRoomDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chatRoom
     */
    select?: chatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatRoomInclude<ExtArgs> | null
    /**
     * Filter which chatRoom to delete.
     */
    where: chatRoomWhereUniqueInput
  }

  /**
   * chatRoom deleteMany
   */
  export type chatRoomDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which chatRooms to delete
     */
    where?: chatRoomWhereInput
  }

  /**
   * chatRoom.messages
   */
  export type chatRoom$messagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    where?: messageWhereInput
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    cursor?: messageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * chatRoom without action
   */
  export type chatRoomDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the chatRoom
     */
    select?: chatRoomSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: chatRoomInclude<ExtArgs> | null
  }


  /**
   * Model message
   */

  export type AggregateMessage = {
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  export type MessageMinAggregateOutputType = {
    message_id: string | null
    room_id: string | null
    sender_id: string | null
    content: string | null
    timestamp: Date | null
  }

  export type MessageMaxAggregateOutputType = {
    message_id: string | null
    room_id: string | null
    sender_id: string | null
    content: string | null
    timestamp: Date | null
  }

  export type MessageCountAggregateOutputType = {
    message_id: number
    room_id: number
    sender_id: number
    content: number
    timestamp: number
    _all: number
  }


  export type MessageMinAggregateInputType = {
    message_id?: true
    room_id?: true
    sender_id?: true
    content?: true
    timestamp?: true
  }

  export type MessageMaxAggregateInputType = {
    message_id?: true
    room_id?: true
    sender_id?: true
    content?: true
    timestamp?: true
  }

  export type MessageCountAggregateInputType = {
    message_id?: true
    room_id?: true
    sender_id?: true
    content?: true
    timestamp?: true
    _all?: true
  }

  export type MessageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which message to aggregate.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned messages
    **/
    _count?: true | MessageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MessageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MessageMaxAggregateInputType
  }

  export type GetMessageAggregateType<T extends MessageAggregateArgs> = {
        [P in keyof T & keyof AggregateMessage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMessage[P]>
      : GetScalarType<T[P], AggregateMessage[P]>
  }




  export type messageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: messageWhereInput
    orderBy?: messageOrderByWithAggregationInput | messageOrderByWithAggregationInput[]
    by: MessageScalarFieldEnum[] | MessageScalarFieldEnum
    having?: messageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MessageCountAggregateInputType | true
    _min?: MessageMinAggregateInputType
    _max?: MessageMaxAggregateInputType
  }

  export type MessageGroupByOutputType = {
    message_id: string
    room_id: string
    sender_id: string
    content: string
    timestamp: Date
    _count: MessageCountAggregateOutputType | null
    _min: MessageMinAggregateOutputType | null
    _max: MessageMaxAggregateOutputType | null
  }

  type GetMessageGroupByPayload<T extends messageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MessageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MessageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MessageGroupByOutputType[P]>
            : GetScalarType<T[P], MessageGroupByOutputType[P]>
        }
      >
    >


  export type messageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    message_id?: boolean
    room_id?: boolean
    sender_id?: boolean
    content?: boolean
    timestamp?: boolean
    chatRoom?: boolean | chatRoomDefaultArgs<ExtArgs>
    sender?: boolean | userDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["message"]>


  export type messageSelectScalar = {
    message_id?: boolean
    room_id?: boolean
    sender_id?: boolean
    content?: boolean
    timestamp?: boolean
  }

  export type messageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    chatRoom?: boolean | chatRoomDefaultArgs<ExtArgs>
    sender?: boolean | userDefaultArgs<ExtArgs>
  }

  export type $messagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "message"
    objects: {
      chatRoom: Prisma.$chatRoomPayload<ExtArgs>
      sender: Prisma.$userPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      message_id: string
      room_id: string
      sender_id: string
      content: string
      timestamp: Date
    }, ExtArgs["result"]["message"]>
    composites: {}
  }

  type messageGetPayload<S extends boolean | null | undefined | messageDefaultArgs> = $Result.GetResult<Prisma.$messagePayload, S>

  type messageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<messageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MessageCountAggregateInputType | true
    }

  export interface messageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['message'], meta: { name: 'message' } }
    /**
     * Find zero or one Message that matches the filter.
     * @param {messageFindUniqueArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends messageFindUniqueArgs>(args: SelectSubset<T, messageFindUniqueArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Message that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {messageFindUniqueOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends messageFindUniqueOrThrowArgs>(args: SelectSubset<T, messageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Message that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageFindFirstArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends messageFindFirstArgs>(args?: SelectSubset<T, messageFindFirstArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Message that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageFindFirstOrThrowArgs} args - Arguments to find a Message
     * @example
     * // Get one Message
     * const message = await prisma.message.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends messageFindFirstOrThrowArgs>(args?: SelectSubset<T, messageFindFirstOrThrowArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Messages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Messages
     * const messages = await prisma.message.findMany()
     * 
     * // Get first 10 Messages
     * const messages = await prisma.message.findMany({ take: 10 })
     * 
     * // Only select the `message_id`
     * const messageWithMessage_idOnly = await prisma.message.findMany({ select: { message_id: true } })
     * 
     */
    findMany<T extends messageFindManyArgs>(args?: SelectSubset<T, messageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Message.
     * @param {messageCreateArgs} args - Arguments to create a Message.
     * @example
     * // Create one Message
     * const Message = await prisma.message.create({
     *   data: {
     *     // ... data to create a Message
     *   }
     * })
     * 
     */
    create<T extends messageCreateArgs>(args: SelectSubset<T, messageCreateArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Messages.
     * @param {messageCreateManyArgs} args - Arguments to create many Messages.
     * @example
     * // Create many Messages
     * const message = await prisma.message.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends messageCreateManyArgs>(args?: SelectSubset<T, messageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Message.
     * @param {messageDeleteArgs} args - Arguments to delete one Message.
     * @example
     * // Delete one Message
     * const Message = await prisma.message.delete({
     *   where: {
     *     // ... filter to delete one Message
     *   }
     * })
     * 
     */
    delete<T extends messageDeleteArgs>(args: SelectSubset<T, messageDeleteArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Message.
     * @param {messageUpdateArgs} args - Arguments to update one Message.
     * @example
     * // Update one Message
     * const message = await prisma.message.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends messageUpdateArgs>(args: SelectSubset<T, messageUpdateArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Messages.
     * @param {messageDeleteManyArgs} args - Arguments to filter Messages to delete.
     * @example
     * // Delete a few Messages
     * const { count } = await prisma.message.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends messageDeleteManyArgs>(args?: SelectSubset<T, messageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Messages
     * const message = await prisma.message.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends messageUpdateManyArgs>(args: SelectSubset<T, messageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Message.
     * @param {messageUpsertArgs} args - Arguments to update or create a Message.
     * @example
     * // Update or create a Message
     * const message = await prisma.message.upsert({
     *   create: {
     *     // ... data to create a Message
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Message we want to update
     *   }
     * })
     */
    upsert<T extends messageUpsertArgs>(args: SelectSubset<T, messageUpsertArgs<ExtArgs>>): Prisma__messageClient<$Result.GetResult<Prisma.$messagePayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Messages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageCountArgs} args - Arguments to filter Messages to count.
     * @example
     * // Count the number of Messages
     * const count = await prisma.message.count({
     *   where: {
     *     // ... the filter for the Messages we want to count
     *   }
     * })
    **/
    count<T extends messageCountArgs>(
      args?: Subset<T, messageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MessageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MessageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MessageAggregateArgs>(args: Subset<T, MessageAggregateArgs>): Prisma.PrismaPromise<GetMessageAggregateType<T>>

    /**
     * Group by Message.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {messageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends messageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: messageGroupByArgs['orderBy'] }
        : { orderBy?: messageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, messageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMessageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the message model
   */
  readonly fields: messageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for message.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__messageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    chatRoom<T extends chatRoomDefaultArgs<ExtArgs> = {}>(args?: Subset<T, chatRoomDefaultArgs<ExtArgs>>): Prisma__chatRoomClient<$Result.GetResult<Prisma.$chatRoomPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    sender<T extends userDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userDefaultArgs<ExtArgs>>): Prisma__userClient<$Result.GetResult<Prisma.$userPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the message model
   */ 
  interface messageFieldRefs {
    readonly message_id: FieldRef<"message", 'String'>
    readonly room_id: FieldRef<"message", 'String'>
    readonly sender_id: FieldRef<"message", 'String'>
    readonly content: FieldRef<"message", 'String'>
    readonly timestamp: FieldRef<"message", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * message findUnique
   */
  export type messageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where: messageWhereUniqueInput
  }

  /**
   * message findUniqueOrThrow
   */
  export type messageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where: messageWhereUniqueInput
  }

  /**
   * message findFirst
   */
  export type messageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for messages.
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * message findFirstOrThrow
   */
  export type messageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which message to fetch.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for messages.
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of messages.
     */
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * message findMany
   */
  export type messageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter, which messages to fetch.
     */
    where?: messageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of messages to fetch.
     */
    orderBy?: messageOrderByWithRelationInput | messageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing messages.
     */
    cursor?: messageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` messages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` messages.
     */
    skip?: number
    distinct?: MessageScalarFieldEnum | MessageScalarFieldEnum[]
  }

  /**
   * message create
   */
  export type messageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * The data needed to create a message.
     */
    data: XOR<messageCreateInput, messageUncheckedCreateInput>
  }

  /**
   * message createMany
   */
  export type messageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many messages.
     */
    data: messageCreateManyInput | messageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * message update
   */
  export type messageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * The data needed to update a message.
     */
    data: XOR<messageUpdateInput, messageUncheckedUpdateInput>
    /**
     * Choose, which message to update.
     */
    where: messageWhereUniqueInput
  }

  /**
   * message updateMany
   */
  export type messageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update messages.
     */
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyInput>
    /**
     * Filter which messages to update
     */
    where?: messageWhereInput
  }

  /**
   * message upsert
   */
  export type messageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * The filter to search for the message to update in case it exists.
     */
    where: messageWhereUniqueInput
    /**
     * In case the message found by the `where` argument doesn't exist, create a new message with this data.
     */
    create: XOR<messageCreateInput, messageUncheckedCreateInput>
    /**
     * In case the message was found with the provided `where` argument, update it with this data.
     */
    update: XOR<messageUpdateInput, messageUncheckedUpdateInput>
  }

  /**
   * message delete
   */
  export type messageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
    /**
     * Filter which message to delete.
     */
    where: messageWhereUniqueInput
  }

  /**
   * message deleteMany
   */
  export type messageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which messages to delete
     */
    where?: messageWhereInput
  }

  /**
   * message without action
   */
  export type messageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the message
     */
    select?: messageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: messageInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    user_id: 'user_id',
    email: 'email',
    name: 'name',
    password: 'password',
    date_joined: 'date_joined',
    height: 'height',
    weight: 'weight'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const PostingScalarFieldEnum: {
    post_id: 'post_id',
    user_id: 'user_id',
    text: 'text',
    date_created: 'date_created',
    semester: 'semester'
  };

  export type PostingScalarFieldEnum = (typeof PostingScalarFieldEnum)[keyof typeof PostingScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    imageUrl: 'imageUrl'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const ChatRoomScalarFieldEnum: {
    room_id: 'room_id',
    first_user_id: 'first_user_id',
    second_user_id: 'second_user_id'
  };

  export type ChatRoomScalarFieldEnum = (typeof ChatRoomScalarFieldEnum)[keyof typeof ChatRoomScalarFieldEnum]


  export const MessageScalarFieldEnum: {
    message_id: 'message_id',
    room_id: 'room_id',
    sender_id: 'sender_id',
    content: 'content',
    timestamp: 'timestamp'
  };

  export type MessageScalarFieldEnum = (typeof MessageScalarFieldEnum)[keyof typeof MessageScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type userWhereInput = {
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    user_id?: StringFilter<"user"> | string
    email?: StringFilter<"user"> | string
    name?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    date_joined?: DateTimeFilter<"user"> | Date | string
    height?: IntFilter<"user"> | number
    weight?: IntFilter<"user"> | number
    postings?: PostingListRelationFilter
    messages?: MessageListRelationFilter
    chatRoomAsFirstUser?: ChatRoomListRelationFilter
    chatRoomAsSecondUser?: ChatRoomListRelationFilter
  }

  export type userOrderByWithRelationInput = {
    user_id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    date_joined?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    postings?: postingOrderByRelationAggregateInput
    messages?: messageOrderByRelationAggregateInput
    chatRoomAsFirstUser?: chatRoomOrderByRelationAggregateInput
    chatRoomAsSecondUser?: chatRoomOrderByRelationAggregateInput
  }

  export type userWhereUniqueInput = Prisma.AtLeast<{
    user_id?: string
    email?: string
    AND?: userWhereInput | userWhereInput[]
    OR?: userWhereInput[]
    NOT?: userWhereInput | userWhereInput[]
    name?: StringFilter<"user"> | string
    password?: StringFilter<"user"> | string
    date_joined?: DateTimeFilter<"user"> | Date | string
    height?: IntFilter<"user"> | number
    weight?: IntFilter<"user"> | number
    postings?: PostingListRelationFilter
    messages?: MessageListRelationFilter
    chatRoomAsFirstUser?: ChatRoomListRelationFilter
    chatRoomAsSecondUser?: ChatRoomListRelationFilter
  }, "user_id" | "email">

  export type userOrderByWithAggregationInput = {
    user_id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    date_joined?: SortOrder
    height?: SortOrder
    weight?: SortOrder
    _count?: userCountOrderByAggregateInput
    _avg?: userAvgOrderByAggregateInput
    _max?: userMaxOrderByAggregateInput
    _min?: userMinOrderByAggregateInput
    _sum?: userSumOrderByAggregateInput
  }

  export type userScalarWhereWithAggregatesInput = {
    AND?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    OR?: userScalarWhereWithAggregatesInput[]
    NOT?: userScalarWhereWithAggregatesInput | userScalarWhereWithAggregatesInput[]
    user_id?: StringWithAggregatesFilter<"user"> | string
    email?: StringWithAggregatesFilter<"user"> | string
    name?: StringWithAggregatesFilter<"user"> | string
    password?: StringWithAggregatesFilter<"user"> | string
    date_joined?: DateTimeWithAggregatesFilter<"user"> | Date | string
    height?: IntWithAggregatesFilter<"user"> | number
    weight?: IntWithAggregatesFilter<"user"> | number
  }

  export type postingWhereInput = {
    AND?: postingWhereInput | postingWhereInput[]
    OR?: postingWhereInput[]
    NOT?: postingWhereInput | postingWhereInput[]
    post_id?: StringFilter<"posting"> | string
    user_id?: StringFilter<"posting"> | string
    text?: StringFilter<"posting"> | string
    date_created?: DateTimeFilter<"posting"> | Date | string
    semester?: StringNullableFilter<"posting"> | string | null
    uploader?: XOR<UserRelationFilter, userWhereInput>
    images?: ImageListRelationFilter
  }

  export type postingOrderByWithRelationInput = {
    post_id?: SortOrder
    user_id?: SortOrder
    text?: SortOrder
    date_created?: SortOrder
    semester?: SortOrderInput | SortOrder
    uploader?: userOrderByWithRelationInput
    images?: ImageOrderByRelationAggregateInput
  }

  export type postingWhereUniqueInput = Prisma.AtLeast<{
    post_id?: string
    AND?: postingWhereInput | postingWhereInput[]
    OR?: postingWhereInput[]
    NOT?: postingWhereInput | postingWhereInput[]
    user_id?: StringFilter<"posting"> | string
    text?: StringFilter<"posting"> | string
    date_created?: DateTimeFilter<"posting"> | Date | string
    semester?: StringNullableFilter<"posting"> | string | null
    uploader?: XOR<UserRelationFilter, userWhereInput>
    images?: ImageListRelationFilter
  }, "post_id">

  export type postingOrderByWithAggregationInput = {
    post_id?: SortOrder
    user_id?: SortOrder
    text?: SortOrder
    date_created?: SortOrder
    semester?: SortOrderInput | SortOrder
    _count?: postingCountOrderByAggregateInput
    _max?: postingMaxOrderByAggregateInput
    _min?: postingMinOrderByAggregateInput
  }

  export type postingScalarWhereWithAggregatesInput = {
    AND?: postingScalarWhereWithAggregatesInput | postingScalarWhereWithAggregatesInput[]
    OR?: postingScalarWhereWithAggregatesInput[]
    NOT?: postingScalarWhereWithAggregatesInput | postingScalarWhereWithAggregatesInput[]
    post_id?: StringWithAggregatesFilter<"posting"> | string
    user_id?: StringWithAggregatesFilter<"posting"> | string
    text?: StringWithAggregatesFilter<"posting"> | string
    date_created?: DateTimeWithAggregatesFilter<"posting"> | Date | string
    semester?: StringNullableWithAggregatesFilter<"posting"> | string | null
  }

  export type ImageWhereInput = {
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    id?: StringFilter<"Image"> | string
    imageUrl?: StringFilter<"Image"> | string
    posting?: PostingListRelationFilter
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    posting?: postingOrderByRelationAggregateInput
  }

  export type ImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    imageUrl?: StringFilter<"Image"> | string
    posting?: PostingListRelationFilter
  }, "id">

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    imageUrl?: SortOrder
    _count?: ImageCountOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    OR?: ImageScalarWhereWithAggregatesInput[]
    NOT?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Image"> | string
    imageUrl?: StringWithAggregatesFilter<"Image"> | string
  }

  export type chatRoomWhereInput = {
    AND?: chatRoomWhereInput | chatRoomWhereInput[]
    OR?: chatRoomWhereInput[]
    NOT?: chatRoomWhereInput | chatRoomWhereInput[]
    room_id?: StringFilter<"chatRoom"> | string
    first_user_id?: StringFilter<"chatRoom"> | string
    second_user_id?: StringFilter<"chatRoom"> | string
    first_user?: XOR<UserRelationFilter, userWhereInput>
    second_user?: XOR<UserRelationFilter, userWhereInput>
    messages?: MessageListRelationFilter
  }

  export type chatRoomOrderByWithRelationInput = {
    room_id?: SortOrder
    first_user_id?: SortOrder
    second_user_id?: SortOrder
    first_user?: userOrderByWithRelationInput
    second_user?: userOrderByWithRelationInput
    messages?: messageOrderByRelationAggregateInput
  }

  export type chatRoomWhereUniqueInput = Prisma.AtLeast<{
    room_id?: string
    first_user_id_second_user_id?: chatRoomFirst_user_idSecond_user_idCompoundUniqueInput
    AND?: chatRoomWhereInput | chatRoomWhereInput[]
    OR?: chatRoomWhereInput[]
    NOT?: chatRoomWhereInput | chatRoomWhereInput[]
    first_user_id?: StringFilter<"chatRoom"> | string
    second_user_id?: StringFilter<"chatRoom"> | string
    first_user?: XOR<UserRelationFilter, userWhereInput>
    second_user?: XOR<UserRelationFilter, userWhereInput>
    messages?: MessageListRelationFilter
  }, "room_id" | "first_user_id_second_user_id">

  export type chatRoomOrderByWithAggregationInput = {
    room_id?: SortOrder
    first_user_id?: SortOrder
    second_user_id?: SortOrder
    _count?: chatRoomCountOrderByAggregateInput
    _max?: chatRoomMaxOrderByAggregateInput
    _min?: chatRoomMinOrderByAggregateInput
  }

  export type chatRoomScalarWhereWithAggregatesInput = {
    AND?: chatRoomScalarWhereWithAggregatesInput | chatRoomScalarWhereWithAggregatesInput[]
    OR?: chatRoomScalarWhereWithAggregatesInput[]
    NOT?: chatRoomScalarWhereWithAggregatesInput | chatRoomScalarWhereWithAggregatesInput[]
    room_id?: StringWithAggregatesFilter<"chatRoom"> | string
    first_user_id?: StringWithAggregatesFilter<"chatRoom"> | string
    second_user_id?: StringWithAggregatesFilter<"chatRoom"> | string
  }

  export type messageWhereInput = {
    AND?: messageWhereInput | messageWhereInput[]
    OR?: messageWhereInput[]
    NOT?: messageWhereInput | messageWhereInput[]
    message_id?: StringFilter<"message"> | string
    room_id?: StringFilter<"message"> | string
    sender_id?: StringFilter<"message"> | string
    content?: StringFilter<"message"> | string
    timestamp?: DateTimeFilter<"message"> | Date | string
    chatRoom?: XOR<ChatRoomRelationFilter, chatRoomWhereInput>
    sender?: XOR<UserRelationFilter, userWhereInput>
  }

  export type messageOrderByWithRelationInput = {
    message_id?: SortOrder
    room_id?: SortOrder
    sender_id?: SortOrder
    content?: SortOrder
    timestamp?: SortOrder
    chatRoom?: chatRoomOrderByWithRelationInput
    sender?: userOrderByWithRelationInput
  }

  export type messageWhereUniqueInput = Prisma.AtLeast<{
    message_id?: string
    AND?: messageWhereInput | messageWhereInput[]
    OR?: messageWhereInput[]
    NOT?: messageWhereInput | messageWhereInput[]
    room_id?: StringFilter<"message"> | string
    sender_id?: StringFilter<"message"> | string
    content?: StringFilter<"message"> | string
    timestamp?: DateTimeFilter<"message"> | Date | string
    chatRoom?: XOR<ChatRoomRelationFilter, chatRoomWhereInput>
    sender?: XOR<UserRelationFilter, userWhereInput>
  }, "message_id">

  export type messageOrderByWithAggregationInput = {
    message_id?: SortOrder
    room_id?: SortOrder
    sender_id?: SortOrder
    content?: SortOrder
    timestamp?: SortOrder
    _count?: messageCountOrderByAggregateInput
    _max?: messageMaxOrderByAggregateInput
    _min?: messageMinOrderByAggregateInput
  }

  export type messageScalarWhereWithAggregatesInput = {
    AND?: messageScalarWhereWithAggregatesInput | messageScalarWhereWithAggregatesInput[]
    OR?: messageScalarWhereWithAggregatesInput[]
    NOT?: messageScalarWhereWithAggregatesInput | messageScalarWhereWithAggregatesInput[]
    message_id?: StringWithAggregatesFilter<"message"> | string
    room_id?: StringWithAggregatesFilter<"message"> | string
    sender_id?: StringWithAggregatesFilter<"message"> | string
    content?: StringWithAggregatesFilter<"message"> | string
    timestamp?: DateTimeWithAggregatesFilter<"message"> | Date | string
  }

  export type userCreateInput = {
    user_id?: string
    email: string
    name: string
    password: string
    date_joined: Date | string
    height: number
    weight: number
    postings?: postingCreateNestedManyWithoutUploaderInput
    messages?: messageCreateNestedManyWithoutSenderInput
    chatRoomAsFirstUser?: chatRoomCreateNestedManyWithoutFirst_userInput
    chatRoomAsSecondUser?: chatRoomCreateNestedManyWithoutSecond_userInput
  }

  export type userUncheckedCreateInput = {
    user_id?: string
    email: string
    name: string
    password: string
    date_joined: Date | string
    height: number
    weight: number
    postings?: postingUncheckedCreateNestedManyWithoutUploaderInput
    messages?: messageUncheckedCreateNestedManyWithoutSenderInput
    chatRoomAsFirstUser?: chatRoomUncheckedCreateNestedManyWithoutFirst_userInput
    chatRoomAsSecondUser?: chatRoomUncheckedCreateNestedManyWithoutSecond_userInput
  }

  export type userUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    postings?: postingUpdateManyWithoutUploaderNestedInput
    messages?: messageUpdateManyWithoutSenderNestedInput
    chatRoomAsFirstUser?: chatRoomUpdateManyWithoutFirst_userNestedInput
    chatRoomAsSecondUser?: chatRoomUpdateManyWithoutSecond_userNestedInput
  }

  export type userUncheckedUpdateInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    postings?: postingUncheckedUpdateManyWithoutUploaderNestedInput
    messages?: messageUncheckedUpdateManyWithoutSenderNestedInput
    chatRoomAsFirstUser?: chatRoomUncheckedUpdateManyWithoutFirst_userNestedInput
    chatRoomAsSecondUser?: chatRoomUncheckedUpdateManyWithoutSecond_userNestedInput
  }

  export type userCreateManyInput = {
    user_id?: string
    email: string
    name: string
    password: string
    date_joined: Date | string
    height: number
    weight: number
  }

  export type userUpdateManyMutationInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
  }

  export type userUncheckedUpdateManyInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
  }

  export type postingCreateInput = {
    post_id?: string
    text: string
    date_created: Date | string
    semester?: string | null
    uploader: userCreateNestedOneWithoutPostingsInput
    images?: ImageCreateNestedManyWithoutPostingInput
  }

  export type postingUncheckedCreateInput = {
    post_id?: string
    user_id: string
    text: string
    date_created: Date | string
    semester?: string | null
    images?: ImageUncheckedCreateNestedManyWithoutPostingInput
  }

  export type postingUpdateInput = {
    post_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    uploader?: userUpdateOneRequiredWithoutPostingsNestedInput
    images?: ImageUpdateManyWithoutPostingNestedInput
  }

  export type postingUncheckedUpdateInput = {
    post_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ImageUncheckedUpdateManyWithoutPostingNestedInput
  }

  export type postingCreateManyInput = {
    post_id?: string
    user_id: string
    text: string
    date_created: Date | string
    semester?: string | null
  }

  export type postingUpdateManyMutationInput = {
    post_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    semester?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type postingUncheckedUpdateManyInput = {
    post_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    semester?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ImageCreateInput = {
    id?: string
    imageUrl: string
    posting?: postingCreateNestedManyWithoutImagesInput
  }

  export type ImageUncheckedCreateInput = {
    id?: string
    imageUrl: string
    posting?: postingUncheckedCreateNestedManyWithoutImagesInput
  }

  export type ImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    posting?: postingUpdateManyWithoutImagesNestedInput
  }

  export type ImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
    posting?: postingUncheckedUpdateManyWithoutImagesNestedInput
  }

  export type ImageCreateManyInput = {
    id?: string
    imageUrl: string
  }

  export type ImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type chatRoomCreateInput = {
    room_id?: string
    first_user: userCreateNestedOneWithoutChatRoomAsFirstUserInput
    second_user: userCreateNestedOneWithoutChatRoomAsSecondUserInput
    messages?: messageCreateNestedManyWithoutChatRoomInput
  }

  export type chatRoomUncheckedCreateInput = {
    room_id?: string
    first_user_id: string
    second_user_id: string
    messages?: messageUncheckedCreateNestedManyWithoutChatRoomInput
  }

  export type chatRoomUpdateInput = {
    room_id?: StringFieldUpdateOperationsInput | string
    first_user?: userUpdateOneRequiredWithoutChatRoomAsFirstUserNestedInput
    second_user?: userUpdateOneRequiredWithoutChatRoomAsSecondUserNestedInput
    messages?: messageUpdateManyWithoutChatRoomNestedInput
  }

  export type chatRoomUncheckedUpdateInput = {
    room_id?: StringFieldUpdateOperationsInput | string
    first_user_id?: StringFieldUpdateOperationsInput | string
    second_user_id?: StringFieldUpdateOperationsInput | string
    messages?: messageUncheckedUpdateManyWithoutChatRoomNestedInput
  }

  export type chatRoomCreateManyInput = {
    room_id?: string
    first_user_id: string
    second_user_id: string
  }

  export type chatRoomUpdateManyMutationInput = {
    room_id?: StringFieldUpdateOperationsInput | string
  }

  export type chatRoomUncheckedUpdateManyInput = {
    room_id?: StringFieldUpdateOperationsInput | string
    first_user_id?: StringFieldUpdateOperationsInput | string
    second_user_id?: StringFieldUpdateOperationsInput | string
  }

  export type messageCreateInput = {
    message_id?: string
    content: string
    timestamp?: Date | string
    chatRoom: chatRoomCreateNestedOneWithoutMessagesInput
    sender: userCreateNestedOneWithoutMessagesInput
  }

  export type messageUncheckedCreateInput = {
    message_id?: string
    room_id: string
    sender_id: string
    content: string
    timestamp?: Date | string
  }

  export type messageUpdateInput = {
    message_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    chatRoom?: chatRoomUpdateOneRequiredWithoutMessagesNestedInput
    sender?: userUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type messageUncheckedUpdateInput = {
    message_id?: StringFieldUpdateOperationsInput | string
    room_id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messageCreateManyInput = {
    message_id?: string
    room_id: string
    sender_id: string
    content: string
    timestamp?: Date | string
  }

  export type messageUpdateManyMutationInput = {
    message_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messageUncheckedUpdateManyInput = {
    message_id?: StringFieldUpdateOperationsInput | string
    room_id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type PostingListRelationFilter = {
    every?: postingWhereInput
    some?: postingWhereInput
    none?: postingWhereInput
  }

  export type MessageListRelationFilter = {
    every?: messageWhereInput
    some?: messageWhereInput
    none?: messageWhereInput
  }

  export type ChatRoomListRelationFilter = {
    every?: chatRoomWhereInput
    some?: chatRoomWhereInput
    none?: chatRoomWhereInput
  }

  export type postingOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type messageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type chatRoomOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userCountOrderByAggregateInput = {
    user_id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    date_joined?: SortOrder
    height?: SortOrder
    weight?: SortOrder
  }

  export type userAvgOrderByAggregateInput = {
    height?: SortOrder
    weight?: SortOrder
  }

  export type userMaxOrderByAggregateInput = {
    user_id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    date_joined?: SortOrder
    height?: SortOrder
    weight?: SortOrder
  }

  export type userMinOrderByAggregateInput = {
    user_id?: SortOrder
    email?: SortOrder
    name?: SortOrder
    password?: SortOrder
    date_joined?: SortOrder
    height?: SortOrder
    weight?: SortOrder
  }

  export type userSumOrderByAggregateInput = {
    height?: SortOrder
    weight?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type UserRelationFilter = {
    is?: userWhereInput
    isNot?: userWhereInput
  }

  export type ImageListRelationFilter = {
    every?: ImageWhereInput
    some?: ImageWhereInput
    none?: ImageWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type postingCountOrderByAggregateInput = {
    post_id?: SortOrder
    user_id?: SortOrder
    text?: SortOrder
    date_created?: SortOrder
    semester?: SortOrder
  }

  export type postingMaxOrderByAggregateInput = {
    post_id?: SortOrder
    user_id?: SortOrder
    text?: SortOrder
    date_created?: SortOrder
    semester?: SortOrder
  }

  export type postingMinOrderByAggregateInput = {
    post_id?: SortOrder
    user_id?: SortOrder
    text?: SortOrder
    date_created?: SortOrder
    semester?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    imageUrl?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    imageUrl?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    imageUrl?: SortOrder
  }

  export type chatRoomFirst_user_idSecond_user_idCompoundUniqueInput = {
    first_user_id: string
    second_user_id: string
  }

  export type chatRoomCountOrderByAggregateInput = {
    room_id?: SortOrder
    first_user_id?: SortOrder
    second_user_id?: SortOrder
  }

  export type chatRoomMaxOrderByAggregateInput = {
    room_id?: SortOrder
    first_user_id?: SortOrder
    second_user_id?: SortOrder
  }

  export type chatRoomMinOrderByAggregateInput = {
    room_id?: SortOrder
    first_user_id?: SortOrder
    second_user_id?: SortOrder
  }

  export type ChatRoomRelationFilter = {
    is?: chatRoomWhereInput
    isNot?: chatRoomWhereInput
  }

  export type messageCountOrderByAggregateInput = {
    message_id?: SortOrder
    room_id?: SortOrder
    sender_id?: SortOrder
    content?: SortOrder
    timestamp?: SortOrder
  }

  export type messageMaxOrderByAggregateInput = {
    message_id?: SortOrder
    room_id?: SortOrder
    sender_id?: SortOrder
    content?: SortOrder
    timestamp?: SortOrder
  }

  export type messageMinOrderByAggregateInput = {
    message_id?: SortOrder
    room_id?: SortOrder
    sender_id?: SortOrder
    content?: SortOrder
    timestamp?: SortOrder
  }

  export type postingCreateNestedManyWithoutUploaderInput = {
    create?: XOR<postingCreateWithoutUploaderInput, postingUncheckedCreateWithoutUploaderInput> | postingCreateWithoutUploaderInput[] | postingUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: postingCreateOrConnectWithoutUploaderInput | postingCreateOrConnectWithoutUploaderInput[]
    createMany?: postingCreateManyUploaderInputEnvelope
    connect?: postingWhereUniqueInput | postingWhereUniqueInput[]
  }

  export type messageCreateNestedManyWithoutSenderInput = {
    create?: XOR<messageCreateWithoutSenderInput, messageUncheckedCreateWithoutSenderInput> | messageCreateWithoutSenderInput[] | messageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: messageCreateOrConnectWithoutSenderInput | messageCreateOrConnectWithoutSenderInput[]
    createMany?: messageCreateManySenderInputEnvelope
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
  }

  export type chatRoomCreateNestedManyWithoutFirst_userInput = {
    create?: XOR<chatRoomCreateWithoutFirst_userInput, chatRoomUncheckedCreateWithoutFirst_userInput> | chatRoomCreateWithoutFirst_userInput[] | chatRoomUncheckedCreateWithoutFirst_userInput[]
    connectOrCreate?: chatRoomCreateOrConnectWithoutFirst_userInput | chatRoomCreateOrConnectWithoutFirst_userInput[]
    createMany?: chatRoomCreateManyFirst_userInputEnvelope
    connect?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
  }

  export type chatRoomCreateNestedManyWithoutSecond_userInput = {
    create?: XOR<chatRoomCreateWithoutSecond_userInput, chatRoomUncheckedCreateWithoutSecond_userInput> | chatRoomCreateWithoutSecond_userInput[] | chatRoomUncheckedCreateWithoutSecond_userInput[]
    connectOrCreate?: chatRoomCreateOrConnectWithoutSecond_userInput | chatRoomCreateOrConnectWithoutSecond_userInput[]
    createMany?: chatRoomCreateManySecond_userInputEnvelope
    connect?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
  }

  export type postingUncheckedCreateNestedManyWithoutUploaderInput = {
    create?: XOR<postingCreateWithoutUploaderInput, postingUncheckedCreateWithoutUploaderInput> | postingCreateWithoutUploaderInput[] | postingUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: postingCreateOrConnectWithoutUploaderInput | postingCreateOrConnectWithoutUploaderInput[]
    createMany?: postingCreateManyUploaderInputEnvelope
    connect?: postingWhereUniqueInput | postingWhereUniqueInput[]
  }

  export type messageUncheckedCreateNestedManyWithoutSenderInput = {
    create?: XOR<messageCreateWithoutSenderInput, messageUncheckedCreateWithoutSenderInput> | messageCreateWithoutSenderInput[] | messageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: messageCreateOrConnectWithoutSenderInput | messageCreateOrConnectWithoutSenderInput[]
    createMany?: messageCreateManySenderInputEnvelope
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
  }

  export type chatRoomUncheckedCreateNestedManyWithoutFirst_userInput = {
    create?: XOR<chatRoomCreateWithoutFirst_userInput, chatRoomUncheckedCreateWithoutFirst_userInput> | chatRoomCreateWithoutFirst_userInput[] | chatRoomUncheckedCreateWithoutFirst_userInput[]
    connectOrCreate?: chatRoomCreateOrConnectWithoutFirst_userInput | chatRoomCreateOrConnectWithoutFirst_userInput[]
    createMany?: chatRoomCreateManyFirst_userInputEnvelope
    connect?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
  }

  export type chatRoomUncheckedCreateNestedManyWithoutSecond_userInput = {
    create?: XOR<chatRoomCreateWithoutSecond_userInput, chatRoomUncheckedCreateWithoutSecond_userInput> | chatRoomCreateWithoutSecond_userInput[] | chatRoomUncheckedCreateWithoutSecond_userInput[]
    connectOrCreate?: chatRoomCreateOrConnectWithoutSecond_userInput | chatRoomCreateOrConnectWithoutSecond_userInput[]
    createMany?: chatRoomCreateManySecond_userInputEnvelope
    connect?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type postingUpdateManyWithoutUploaderNestedInput = {
    create?: XOR<postingCreateWithoutUploaderInput, postingUncheckedCreateWithoutUploaderInput> | postingCreateWithoutUploaderInput[] | postingUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: postingCreateOrConnectWithoutUploaderInput | postingCreateOrConnectWithoutUploaderInput[]
    upsert?: postingUpsertWithWhereUniqueWithoutUploaderInput | postingUpsertWithWhereUniqueWithoutUploaderInput[]
    createMany?: postingCreateManyUploaderInputEnvelope
    set?: postingWhereUniqueInput | postingWhereUniqueInput[]
    disconnect?: postingWhereUniqueInput | postingWhereUniqueInput[]
    delete?: postingWhereUniqueInput | postingWhereUniqueInput[]
    connect?: postingWhereUniqueInput | postingWhereUniqueInput[]
    update?: postingUpdateWithWhereUniqueWithoutUploaderInput | postingUpdateWithWhereUniqueWithoutUploaderInput[]
    updateMany?: postingUpdateManyWithWhereWithoutUploaderInput | postingUpdateManyWithWhereWithoutUploaderInput[]
    deleteMany?: postingScalarWhereInput | postingScalarWhereInput[]
  }

  export type messageUpdateManyWithoutSenderNestedInput = {
    create?: XOR<messageCreateWithoutSenderInput, messageUncheckedCreateWithoutSenderInput> | messageCreateWithoutSenderInput[] | messageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: messageCreateOrConnectWithoutSenderInput | messageCreateOrConnectWithoutSenderInput[]
    upsert?: messageUpsertWithWhereUniqueWithoutSenderInput | messageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: messageCreateManySenderInputEnvelope
    set?: messageWhereUniqueInput | messageWhereUniqueInput[]
    disconnect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    delete?: messageWhereUniqueInput | messageWhereUniqueInput[]
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    update?: messageUpdateWithWhereUniqueWithoutSenderInput | messageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: messageUpdateManyWithWhereWithoutSenderInput | messageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: messageScalarWhereInput | messageScalarWhereInput[]
  }

  export type chatRoomUpdateManyWithoutFirst_userNestedInput = {
    create?: XOR<chatRoomCreateWithoutFirst_userInput, chatRoomUncheckedCreateWithoutFirst_userInput> | chatRoomCreateWithoutFirst_userInput[] | chatRoomUncheckedCreateWithoutFirst_userInput[]
    connectOrCreate?: chatRoomCreateOrConnectWithoutFirst_userInput | chatRoomCreateOrConnectWithoutFirst_userInput[]
    upsert?: chatRoomUpsertWithWhereUniqueWithoutFirst_userInput | chatRoomUpsertWithWhereUniqueWithoutFirst_userInput[]
    createMany?: chatRoomCreateManyFirst_userInputEnvelope
    set?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
    disconnect?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
    delete?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
    connect?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
    update?: chatRoomUpdateWithWhereUniqueWithoutFirst_userInput | chatRoomUpdateWithWhereUniqueWithoutFirst_userInput[]
    updateMany?: chatRoomUpdateManyWithWhereWithoutFirst_userInput | chatRoomUpdateManyWithWhereWithoutFirst_userInput[]
    deleteMany?: chatRoomScalarWhereInput | chatRoomScalarWhereInput[]
  }

  export type chatRoomUpdateManyWithoutSecond_userNestedInput = {
    create?: XOR<chatRoomCreateWithoutSecond_userInput, chatRoomUncheckedCreateWithoutSecond_userInput> | chatRoomCreateWithoutSecond_userInput[] | chatRoomUncheckedCreateWithoutSecond_userInput[]
    connectOrCreate?: chatRoomCreateOrConnectWithoutSecond_userInput | chatRoomCreateOrConnectWithoutSecond_userInput[]
    upsert?: chatRoomUpsertWithWhereUniqueWithoutSecond_userInput | chatRoomUpsertWithWhereUniqueWithoutSecond_userInput[]
    createMany?: chatRoomCreateManySecond_userInputEnvelope
    set?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
    disconnect?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
    delete?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
    connect?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
    update?: chatRoomUpdateWithWhereUniqueWithoutSecond_userInput | chatRoomUpdateWithWhereUniqueWithoutSecond_userInput[]
    updateMany?: chatRoomUpdateManyWithWhereWithoutSecond_userInput | chatRoomUpdateManyWithWhereWithoutSecond_userInput[]
    deleteMany?: chatRoomScalarWhereInput | chatRoomScalarWhereInput[]
  }

  export type postingUncheckedUpdateManyWithoutUploaderNestedInput = {
    create?: XOR<postingCreateWithoutUploaderInput, postingUncheckedCreateWithoutUploaderInput> | postingCreateWithoutUploaderInput[] | postingUncheckedCreateWithoutUploaderInput[]
    connectOrCreate?: postingCreateOrConnectWithoutUploaderInput | postingCreateOrConnectWithoutUploaderInput[]
    upsert?: postingUpsertWithWhereUniqueWithoutUploaderInput | postingUpsertWithWhereUniqueWithoutUploaderInput[]
    createMany?: postingCreateManyUploaderInputEnvelope
    set?: postingWhereUniqueInput | postingWhereUniqueInput[]
    disconnect?: postingWhereUniqueInput | postingWhereUniqueInput[]
    delete?: postingWhereUniqueInput | postingWhereUniqueInput[]
    connect?: postingWhereUniqueInput | postingWhereUniqueInput[]
    update?: postingUpdateWithWhereUniqueWithoutUploaderInput | postingUpdateWithWhereUniqueWithoutUploaderInput[]
    updateMany?: postingUpdateManyWithWhereWithoutUploaderInput | postingUpdateManyWithWhereWithoutUploaderInput[]
    deleteMany?: postingScalarWhereInput | postingScalarWhereInput[]
  }

  export type messageUncheckedUpdateManyWithoutSenderNestedInput = {
    create?: XOR<messageCreateWithoutSenderInput, messageUncheckedCreateWithoutSenderInput> | messageCreateWithoutSenderInput[] | messageUncheckedCreateWithoutSenderInput[]
    connectOrCreate?: messageCreateOrConnectWithoutSenderInput | messageCreateOrConnectWithoutSenderInput[]
    upsert?: messageUpsertWithWhereUniqueWithoutSenderInput | messageUpsertWithWhereUniqueWithoutSenderInput[]
    createMany?: messageCreateManySenderInputEnvelope
    set?: messageWhereUniqueInput | messageWhereUniqueInput[]
    disconnect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    delete?: messageWhereUniqueInput | messageWhereUniqueInput[]
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    update?: messageUpdateWithWhereUniqueWithoutSenderInput | messageUpdateWithWhereUniqueWithoutSenderInput[]
    updateMany?: messageUpdateManyWithWhereWithoutSenderInput | messageUpdateManyWithWhereWithoutSenderInput[]
    deleteMany?: messageScalarWhereInput | messageScalarWhereInput[]
  }

  export type chatRoomUncheckedUpdateManyWithoutFirst_userNestedInput = {
    create?: XOR<chatRoomCreateWithoutFirst_userInput, chatRoomUncheckedCreateWithoutFirst_userInput> | chatRoomCreateWithoutFirst_userInput[] | chatRoomUncheckedCreateWithoutFirst_userInput[]
    connectOrCreate?: chatRoomCreateOrConnectWithoutFirst_userInput | chatRoomCreateOrConnectWithoutFirst_userInput[]
    upsert?: chatRoomUpsertWithWhereUniqueWithoutFirst_userInput | chatRoomUpsertWithWhereUniqueWithoutFirst_userInput[]
    createMany?: chatRoomCreateManyFirst_userInputEnvelope
    set?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
    disconnect?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
    delete?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
    connect?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
    update?: chatRoomUpdateWithWhereUniqueWithoutFirst_userInput | chatRoomUpdateWithWhereUniqueWithoutFirst_userInput[]
    updateMany?: chatRoomUpdateManyWithWhereWithoutFirst_userInput | chatRoomUpdateManyWithWhereWithoutFirst_userInput[]
    deleteMany?: chatRoomScalarWhereInput | chatRoomScalarWhereInput[]
  }

  export type chatRoomUncheckedUpdateManyWithoutSecond_userNestedInput = {
    create?: XOR<chatRoomCreateWithoutSecond_userInput, chatRoomUncheckedCreateWithoutSecond_userInput> | chatRoomCreateWithoutSecond_userInput[] | chatRoomUncheckedCreateWithoutSecond_userInput[]
    connectOrCreate?: chatRoomCreateOrConnectWithoutSecond_userInput | chatRoomCreateOrConnectWithoutSecond_userInput[]
    upsert?: chatRoomUpsertWithWhereUniqueWithoutSecond_userInput | chatRoomUpsertWithWhereUniqueWithoutSecond_userInput[]
    createMany?: chatRoomCreateManySecond_userInputEnvelope
    set?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
    disconnect?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
    delete?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
    connect?: chatRoomWhereUniqueInput | chatRoomWhereUniqueInput[]
    update?: chatRoomUpdateWithWhereUniqueWithoutSecond_userInput | chatRoomUpdateWithWhereUniqueWithoutSecond_userInput[]
    updateMany?: chatRoomUpdateManyWithWhereWithoutSecond_userInput | chatRoomUpdateManyWithWhereWithoutSecond_userInput[]
    deleteMany?: chatRoomScalarWhereInput | chatRoomScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutPostingsInput = {
    create?: XOR<userCreateWithoutPostingsInput, userUncheckedCreateWithoutPostingsInput>
    connectOrCreate?: userCreateOrConnectWithoutPostingsInput
    connect?: userWhereUniqueInput
  }

  export type ImageCreateNestedManyWithoutPostingInput = {
    create?: XOR<ImageCreateWithoutPostingInput, ImageUncheckedCreateWithoutPostingInput> | ImageCreateWithoutPostingInput[] | ImageUncheckedCreateWithoutPostingInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutPostingInput | ImageCreateOrConnectWithoutPostingInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type ImageUncheckedCreateNestedManyWithoutPostingInput = {
    create?: XOR<ImageCreateWithoutPostingInput, ImageUncheckedCreateWithoutPostingInput> | ImageCreateWithoutPostingInput[] | ImageUncheckedCreateWithoutPostingInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutPostingInput | ImageCreateOrConnectWithoutPostingInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type userUpdateOneRequiredWithoutPostingsNestedInput = {
    create?: XOR<userCreateWithoutPostingsInput, userUncheckedCreateWithoutPostingsInput>
    connectOrCreate?: userCreateOrConnectWithoutPostingsInput
    upsert?: userUpsertWithoutPostingsInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutPostingsInput, userUpdateWithoutPostingsInput>, userUncheckedUpdateWithoutPostingsInput>
  }

  export type ImageUpdateManyWithoutPostingNestedInput = {
    create?: XOR<ImageCreateWithoutPostingInput, ImageUncheckedCreateWithoutPostingInput> | ImageCreateWithoutPostingInput[] | ImageUncheckedCreateWithoutPostingInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutPostingInput | ImageCreateOrConnectWithoutPostingInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutPostingInput | ImageUpsertWithWhereUniqueWithoutPostingInput[]
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutPostingInput | ImageUpdateWithWhereUniqueWithoutPostingInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutPostingInput | ImageUpdateManyWithWhereWithoutPostingInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type ImageUncheckedUpdateManyWithoutPostingNestedInput = {
    create?: XOR<ImageCreateWithoutPostingInput, ImageUncheckedCreateWithoutPostingInput> | ImageCreateWithoutPostingInput[] | ImageUncheckedCreateWithoutPostingInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutPostingInput | ImageCreateOrConnectWithoutPostingInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutPostingInput | ImageUpsertWithWhereUniqueWithoutPostingInput[]
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutPostingInput | ImageUpdateWithWhereUniqueWithoutPostingInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutPostingInput | ImageUpdateManyWithWhereWithoutPostingInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type postingCreateNestedManyWithoutImagesInput = {
    create?: XOR<postingCreateWithoutImagesInput, postingUncheckedCreateWithoutImagesInput> | postingCreateWithoutImagesInput[] | postingUncheckedCreateWithoutImagesInput[]
    connectOrCreate?: postingCreateOrConnectWithoutImagesInput | postingCreateOrConnectWithoutImagesInput[]
    connect?: postingWhereUniqueInput | postingWhereUniqueInput[]
  }

  export type postingUncheckedCreateNestedManyWithoutImagesInput = {
    create?: XOR<postingCreateWithoutImagesInput, postingUncheckedCreateWithoutImagesInput> | postingCreateWithoutImagesInput[] | postingUncheckedCreateWithoutImagesInput[]
    connectOrCreate?: postingCreateOrConnectWithoutImagesInput | postingCreateOrConnectWithoutImagesInput[]
    connect?: postingWhereUniqueInput | postingWhereUniqueInput[]
  }

  export type postingUpdateManyWithoutImagesNestedInput = {
    create?: XOR<postingCreateWithoutImagesInput, postingUncheckedCreateWithoutImagesInput> | postingCreateWithoutImagesInput[] | postingUncheckedCreateWithoutImagesInput[]
    connectOrCreate?: postingCreateOrConnectWithoutImagesInput | postingCreateOrConnectWithoutImagesInput[]
    upsert?: postingUpsertWithWhereUniqueWithoutImagesInput | postingUpsertWithWhereUniqueWithoutImagesInput[]
    set?: postingWhereUniqueInput | postingWhereUniqueInput[]
    disconnect?: postingWhereUniqueInput | postingWhereUniqueInput[]
    delete?: postingWhereUniqueInput | postingWhereUniqueInput[]
    connect?: postingWhereUniqueInput | postingWhereUniqueInput[]
    update?: postingUpdateWithWhereUniqueWithoutImagesInput | postingUpdateWithWhereUniqueWithoutImagesInput[]
    updateMany?: postingUpdateManyWithWhereWithoutImagesInput | postingUpdateManyWithWhereWithoutImagesInput[]
    deleteMany?: postingScalarWhereInput | postingScalarWhereInput[]
  }

  export type postingUncheckedUpdateManyWithoutImagesNestedInput = {
    create?: XOR<postingCreateWithoutImagesInput, postingUncheckedCreateWithoutImagesInput> | postingCreateWithoutImagesInput[] | postingUncheckedCreateWithoutImagesInput[]
    connectOrCreate?: postingCreateOrConnectWithoutImagesInput | postingCreateOrConnectWithoutImagesInput[]
    upsert?: postingUpsertWithWhereUniqueWithoutImagesInput | postingUpsertWithWhereUniqueWithoutImagesInput[]
    set?: postingWhereUniqueInput | postingWhereUniqueInput[]
    disconnect?: postingWhereUniqueInput | postingWhereUniqueInput[]
    delete?: postingWhereUniqueInput | postingWhereUniqueInput[]
    connect?: postingWhereUniqueInput | postingWhereUniqueInput[]
    update?: postingUpdateWithWhereUniqueWithoutImagesInput | postingUpdateWithWhereUniqueWithoutImagesInput[]
    updateMany?: postingUpdateManyWithWhereWithoutImagesInput | postingUpdateManyWithWhereWithoutImagesInput[]
    deleteMany?: postingScalarWhereInput | postingScalarWhereInput[]
  }

  export type userCreateNestedOneWithoutChatRoomAsFirstUserInput = {
    create?: XOR<userCreateWithoutChatRoomAsFirstUserInput, userUncheckedCreateWithoutChatRoomAsFirstUserInput>
    connectOrCreate?: userCreateOrConnectWithoutChatRoomAsFirstUserInput
    connect?: userWhereUniqueInput
  }

  export type userCreateNestedOneWithoutChatRoomAsSecondUserInput = {
    create?: XOR<userCreateWithoutChatRoomAsSecondUserInput, userUncheckedCreateWithoutChatRoomAsSecondUserInput>
    connectOrCreate?: userCreateOrConnectWithoutChatRoomAsSecondUserInput
    connect?: userWhereUniqueInput
  }

  export type messageCreateNestedManyWithoutChatRoomInput = {
    create?: XOR<messageCreateWithoutChatRoomInput, messageUncheckedCreateWithoutChatRoomInput> | messageCreateWithoutChatRoomInput[] | messageUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: messageCreateOrConnectWithoutChatRoomInput | messageCreateOrConnectWithoutChatRoomInput[]
    createMany?: messageCreateManyChatRoomInputEnvelope
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
  }

  export type messageUncheckedCreateNestedManyWithoutChatRoomInput = {
    create?: XOR<messageCreateWithoutChatRoomInput, messageUncheckedCreateWithoutChatRoomInput> | messageCreateWithoutChatRoomInput[] | messageUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: messageCreateOrConnectWithoutChatRoomInput | messageCreateOrConnectWithoutChatRoomInput[]
    createMany?: messageCreateManyChatRoomInputEnvelope
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
  }

  export type userUpdateOneRequiredWithoutChatRoomAsFirstUserNestedInput = {
    create?: XOR<userCreateWithoutChatRoomAsFirstUserInput, userUncheckedCreateWithoutChatRoomAsFirstUserInput>
    connectOrCreate?: userCreateOrConnectWithoutChatRoomAsFirstUserInput
    upsert?: userUpsertWithoutChatRoomAsFirstUserInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutChatRoomAsFirstUserInput, userUpdateWithoutChatRoomAsFirstUserInput>, userUncheckedUpdateWithoutChatRoomAsFirstUserInput>
  }

  export type userUpdateOneRequiredWithoutChatRoomAsSecondUserNestedInput = {
    create?: XOR<userCreateWithoutChatRoomAsSecondUserInput, userUncheckedCreateWithoutChatRoomAsSecondUserInput>
    connectOrCreate?: userCreateOrConnectWithoutChatRoomAsSecondUserInput
    upsert?: userUpsertWithoutChatRoomAsSecondUserInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutChatRoomAsSecondUserInput, userUpdateWithoutChatRoomAsSecondUserInput>, userUncheckedUpdateWithoutChatRoomAsSecondUserInput>
  }

  export type messageUpdateManyWithoutChatRoomNestedInput = {
    create?: XOR<messageCreateWithoutChatRoomInput, messageUncheckedCreateWithoutChatRoomInput> | messageCreateWithoutChatRoomInput[] | messageUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: messageCreateOrConnectWithoutChatRoomInput | messageCreateOrConnectWithoutChatRoomInput[]
    upsert?: messageUpsertWithWhereUniqueWithoutChatRoomInput | messageUpsertWithWhereUniqueWithoutChatRoomInput[]
    createMany?: messageCreateManyChatRoomInputEnvelope
    set?: messageWhereUniqueInput | messageWhereUniqueInput[]
    disconnect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    delete?: messageWhereUniqueInput | messageWhereUniqueInput[]
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    update?: messageUpdateWithWhereUniqueWithoutChatRoomInput | messageUpdateWithWhereUniqueWithoutChatRoomInput[]
    updateMany?: messageUpdateManyWithWhereWithoutChatRoomInput | messageUpdateManyWithWhereWithoutChatRoomInput[]
    deleteMany?: messageScalarWhereInput | messageScalarWhereInput[]
  }

  export type messageUncheckedUpdateManyWithoutChatRoomNestedInput = {
    create?: XOR<messageCreateWithoutChatRoomInput, messageUncheckedCreateWithoutChatRoomInput> | messageCreateWithoutChatRoomInput[] | messageUncheckedCreateWithoutChatRoomInput[]
    connectOrCreate?: messageCreateOrConnectWithoutChatRoomInput | messageCreateOrConnectWithoutChatRoomInput[]
    upsert?: messageUpsertWithWhereUniqueWithoutChatRoomInput | messageUpsertWithWhereUniqueWithoutChatRoomInput[]
    createMany?: messageCreateManyChatRoomInputEnvelope
    set?: messageWhereUniqueInput | messageWhereUniqueInput[]
    disconnect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    delete?: messageWhereUniqueInput | messageWhereUniqueInput[]
    connect?: messageWhereUniqueInput | messageWhereUniqueInput[]
    update?: messageUpdateWithWhereUniqueWithoutChatRoomInput | messageUpdateWithWhereUniqueWithoutChatRoomInput[]
    updateMany?: messageUpdateManyWithWhereWithoutChatRoomInput | messageUpdateManyWithWhereWithoutChatRoomInput[]
    deleteMany?: messageScalarWhereInput | messageScalarWhereInput[]
  }

  export type chatRoomCreateNestedOneWithoutMessagesInput = {
    create?: XOR<chatRoomCreateWithoutMessagesInput, chatRoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: chatRoomCreateOrConnectWithoutMessagesInput
    connect?: chatRoomWhereUniqueInput
  }

  export type userCreateNestedOneWithoutMessagesInput = {
    create?: XOR<userCreateWithoutMessagesInput, userUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: userCreateOrConnectWithoutMessagesInput
    connect?: userWhereUniqueInput
  }

  export type chatRoomUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<chatRoomCreateWithoutMessagesInput, chatRoomUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: chatRoomCreateOrConnectWithoutMessagesInput
    upsert?: chatRoomUpsertWithoutMessagesInput
    connect?: chatRoomWhereUniqueInput
    update?: XOR<XOR<chatRoomUpdateToOneWithWhereWithoutMessagesInput, chatRoomUpdateWithoutMessagesInput>, chatRoomUncheckedUpdateWithoutMessagesInput>
  }

  export type userUpdateOneRequiredWithoutMessagesNestedInput = {
    create?: XOR<userCreateWithoutMessagesInput, userUncheckedCreateWithoutMessagesInput>
    connectOrCreate?: userCreateOrConnectWithoutMessagesInput
    upsert?: userUpsertWithoutMessagesInput
    connect?: userWhereUniqueInput
    update?: XOR<XOR<userUpdateToOneWithWhereWithoutMessagesInput, userUpdateWithoutMessagesInput>, userUncheckedUpdateWithoutMessagesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type postingCreateWithoutUploaderInput = {
    post_id?: string
    text: string
    date_created: Date | string
    semester?: string | null
    images?: ImageCreateNestedManyWithoutPostingInput
  }

  export type postingUncheckedCreateWithoutUploaderInput = {
    post_id?: string
    text: string
    date_created: Date | string
    semester?: string | null
    images?: ImageUncheckedCreateNestedManyWithoutPostingInput
  }

  export type postingCreateOrConnectWithoutUploaderInput = {
    where: postingWhereUniqueInput
    create: XOR<postingCreateWithoutUploaderInput, postingUncheckedCreateWithoutUploaderInput>
  }

  export type postingCreateManyUploaderInputEnvelope = {
    data: postingCreateManyUploaderInput | postingCreateManyUploaderInput[]
    skipDuplicates?: boolean
  }

  export type messageCreateWithoutSenderInput = {
    message_id?: string
    content: string
    timestamp?: Date | string
    chatRoom: chatRoomCreateNestedOneWithoutMessagesInput
  }

  export type messageUncheckedCreateWithoutSenderInput = {
    message_id?: string
    room_id: string
    content: string
    timestamp?: Date | string
  }

  export type messageCreateOrConnectWithoutSenderInput = {
    where: messageWhereUniqueInput
    create: XOR<messageCreateWithoutSenderInput, messageUncheckedCreateWithoutSenderInput>
  }

  export type messageCreateManySenderInputEnvelope = {
    data: messageCreateManySenderInput | messageCreateManySenderInput[]
    skipDuplicates?: boolean
  }

  export type chatRoomCreateWithoutFirst_userInput = {
    room_id?: string
    second_user: userCreateNestedOneWithoutChatRoomAsSecondUserInput
    messages?: messageCreateNestedManyWithoutChatRoomInput
  }

  export type chatRoomUncheckedCreateWithoutFirst_userInput = {
    room_id?: string
    second_user_id: string
    messages?: messageUncheckedCreateNestedManyWithoutChatRoomInput
  }

  export type chatRoomCreateOrConnectWithoutFirst_userInput = {
    where: chatRoomWhereUniqueInput
    create: XOR<chatRoomCreateWithoutFirst_userInput, chatRoomUncheckedCreateWithoutFirst_userInput>
  }

  export type chatRoomCreateManyFirst_userInputEnvelope = {
    data: chatRoomCreateManyFirst_userInput | chatRoomCreateManyFirst_userInput[]
    skipDuplicates?: boolean
  }

  export type chatRoomCreateWithoutSecond_userInput = {
    room_id?: string
    first_user: userCreateNestedOneWithoutChatRoomAsFirstUserInput
    messages?: messageCreateNestedManyWithoutChatRoomInput
  }

  export type chatRoomUncheckedCreateWithoutSecond_userInput = {
    room_id?: string
    first_user_id: string
    messages?: messageUncheckedCreateNestedManyWithoutChatRoomInput
  }

  export type chatRoomCreateOrConnectWithoutSecond_userInput = {
    where: chatRoomWhereUniqueInput
    create: XOR<chatRoomCreateWithoutSecond_userInput, chatRoomUncheckedCreateWithoutSecond_userInput>
  }

  export type chatRoomCreateManySecond_userInputEnvelope = {
    data: chatRoomCreateManySecond_userInput | chatRoomCreateManySecond_userInput[]
    skipDuplicates?: boolean
  }

  export type postingUpsertWithWhereUniqueWithoutUploaderInput = {
    where: postingWhereUniqueInput
    update: XOR<postingUpdateWithoutUploaderInput, postingUncheckedUpdateWithoutUploaderInput>
    create: XOR<postingCreateWithoutUploaderInput, postingUncheckedCreateWithoutUploaderInput>
  }

  export type postingUpdateWithWhereUniqueWithoutUploaderInput = {
    where: postingWhereUniqueInput
    data: XOR<postingUpdateWithoutUploaderInput, postingUncheckedUpdateWithoutUploaderInput>
  }

  export type postingUpdateManyWithWhereWithoutUploaderInput = {
    where: postingScalarWhereInput
    data: XOR<postingUpdateManyMutationInput, postingUncheckedUpdateManyWithoutUploaderInput>
  }

  export type postingScalarWhereInput = {
    AND?: postingScalarWhereInput | postingScalarWhereInput[]
    OR?: postingScalarWhereInput[]
    NOT?: postingScalarWhereInput | postingScalarWhereInput[]
    post_id?: StringFilter<"posting"> | string
    user_id?: StringFilter<"posting"> | string
    text?: StringFilter<"posting"> | string
    date_created?: DateTimeFilter<"posting"> | Date | string
    semester?: StringNullableFilter<"posting"> | string | null
  }

  export type messageUpsertWithWhereUniqueWithoutSenderInput = {
    where: messageWhereUniqueInput
    update: XOR<messageUpdateWithoutSenderInput, messageUncheckedUpdateWithoutSenderInput>
    create: XOR<messageCreateWithoutSenderInput, messageUncheckedCreateWithoutSenderInput>
  }

  export type messageUpdateWithWhereUniqueWithoutSenderInput = {
    where: messageWhereUniqueInput
    data: XOR<messageUpdateWithoutSenderInput, messageUncheckedUpdateWithoutSenderInput>
  }

  export type messageUpdateManyWithWhereWithoutSenderInput = {
    where: messageScalarWhereInput
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyWithoutSenderInput>
  }

  export type messageScalarWhereInput = {
    AND?: messageScalarWhereInput | messageScalarWhereInput[]
    OR?: messageScalarWhereInput[]
    NOT?: messageScalarWhereInput | messageScalarWhereInput[]
    message_id?: StringFilter<"message"> | string
    room_id?: StringFilter<"message"> | string
    sender_id?: StringFilter<"message"> | string
    content?: StringFilter<"message"> | string
    timestamp?: DateTimeFilter<"message"> | Date | string
  }

  export type chatRoomUpsertWithWhereUniqueWithoutFirst_userInput = {
    where: chatRoomWhereUniqueInput
    update: XOR<chatRoomUpdateWithoutFirst_userInput, chatRoomUncheckedUpdateWithoutFirst_userInput>
    create: XOR<chatRoomCreateWithoutFirst_userInput, chatRoomUncheckedCreateWithoutFirst_userInput>
  }

  export type chatRoomUpdateWithWhereUniqueWithoutFirst_userInput = {
    where: chatRoomWhereUniqueInput
    data: XOR<chatRoomUpdateWithoutFirst_userInput, chatRoomUncheckedUpdateWithoutFirst_userInput>
  }

  export type chatRoomUpdateManyWithWhereWithoutFirst_userInput = {
    where: chatRoomScalarWhereInput
    data: XOR<chatRoomUpdateManyMutationInput, chatRoomUncheckedUpdateManyWithoutFirst_userInput>
  }

  export type chatRoomScalarWhereInput = {
    AND?: chatRoomScalarWhereInput | chatRoomScalarWhereInput[]
    OR?: chatRoomScalarWhereInput[]
    NOT?: chatRoomScalarWhereInput | chatRoomScalarWhereInput[]
    room_id?: StringFilter<"chatRoom"> | string
    first_user_id?: StringFilter<"chatRoom"> | string
    second_user_id?: StringFilter<"chatRoom"> | string
  }

  export type chatRoomUpsertWithWhereUniqueWithoutSecond_userInput = {
    where: chatRoomWhereUniqueInput
    update: XOR<chatRoomUpdateWithoutSecond_userInput, chatRoomUncheckedUpdateWithoutSecond_userInput>
    create: XOR<chatRoomCreateWithoutSecond_userInput, chatRoomUncheckedCreateWithoutSecond_userInput>
  }

  export type chatRoomUpdateWithWhereUniqueWithoutSecond_userInput = {
    where: chatRoomWhereUniqueInput
    data: XOR<chatRoomUpdateWithoutSecond_userInput, chatRoomUncheckedUpdateWithoutSecond_userInput>
  }

  export type chatRoomUpdateManyWithWhereWithoutSecond_userInput = {
    where: chatRoomScalarWhereInput
    data: XOR<chatRoomUpdateManyMutationInput, chatRoomUncheckedUpdateManyWithoutSecond_userInput>
  }

  export type userCreateWithoutPostingsInput = {
    user_id?: string
    email: string
    name: string
    password: string
    date_joined: Date | string
    height: number
    weight: number
    messages?: messageCreateNestedManyWithoutSenderInput
    chatRoomAsFirstUser?: chatRoomCreateNestedManyWithoutFirst_userInput
    chatRoomAsSecondUser?: chatRoomCreateNestedManyWithoutSecond_userInput
  }

  export type userUncheckedCreateWithoutPostingsInput = {
    user_id?: string
    email: string
    name: string
    password: string
    date_joined: Date | string
    height: number
    weight: number
    messages?: messageUncheckedCreateNestedManyWithoutSenderInput
    chatRoomAsFirstUser?: chatRoomUncheckedCreateNestedManyWithoutFirst_userInput
    chatRoomAsSecondUser?: chatRoomUncheckedCreateNestedManyWithoutSecond_userInput
  }

  export type userCreateOrConnectWithoutPostingsInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutPostingsInput, userUncheckedCreateWithoutPostingsInput>
  }

  export type ImageCreateWithoutPostingInput = {
    id?: string
    imageUrl: string
  }

  export type ImageUncheckedCreateWithoutPostingInput = {
    id?: string
    imageUrl: string
  }

  export type ImageCreateOrConnectWithoutPostingInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutPostingInput, ImageUncheckedCreateWithoutPostingInput>
  }

  export type userUpsertWithoutPostingsInput = {
    update: XOR<userUpdateWithoutPostingsInput, userUncheckedUpdateWithoutPostingsInput>
    create: XOR<userCreateWithoutPostingsInput, userUncheckedCreateWithoutPostingsInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutPostingsInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutPostingsInput, userUncheckedUpdateWithoutPostingsInput>
  }

  export type userUpdateWithoutPostingsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    messages?: messageUpdateManyWithoutSenderNestedInput
    chatRoomAsFirstUser?: chatRoomUpdateManyWithoutFirst_userNestedInput
    chatRoomAsSecondUser?: chatRoomUpdateManyWithoutSecond_userNestedInput
  }

  export type userUncheckedUpdateWithoutPostingsInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    messages?: messageUncheckedUpdateManyWithoutSenderNestedInput
    chatRoomAsFirstUser?: chatRoomUncheckedUpdateManyWithoutFirst_userNestedInput
    chatRoomAsSecondUser?: chatRoomUncheckedUpdateManyWithoutSecond_userNestedInput
  }

  export type ImageUpsertWithWhereUniqueWithoutPostingInput = {
    where: ImageWhereUniqueInput
    update: XOR<ImageUpdateWithoutPostingInput, ImageUncheckedUpdateWithoutPostingInput>
    create: XOR<ImageCreateWithoutPostingInput, ImageUncheckedCreateWithoutPostingInput>
  }

  export type ImageUpdateWithWhereUniqueWithoutPostingInput = {
    where: ImageWhereUniqueInput
    data: XOR<ImageUpdateWithoutPostingInput, ImageUncheckedUpdateWithoutPostingInput>
  }

  export type ImageUpdateManyWithWhereWithoutPostingInput = {
    where: ImageScalarWhereInput
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyWithoutPostingInput>
  }

  export type ImageScalarWhereInput = {
    AND?: ImageScalarWhereInput | ImageScalarWhereInput[]
    OR?: ImageScalarWhereInput[]
    NOT?: ImageScalarWhereInput | ImageScalarWhereInput[]
    id?: StringFilter<"Image"> | string
    imageUrl?: StringFilter<"Image"> | string
  }

  export type postingCreateWithoutImagesInput = {
    post_id?: string
    text: string
    date_created: Date | string
    semester?: string | null
    uploader: userCreateNestedOneWithoutPostingsInput
  }

  export type postingUncheckedCreateWithoutImagesInput = {
    post_id?: string
    user_id: string
    text: string
    date_created: Date | string
    semester?: string | null
  }

  export type postingCreateOrConnectWithoutImagesInput = {
    where: postingWhereUniqueInput
    create: XOR<postingCreateWithoutImagesInput, postingUncheckedCreateWithoutImagesInput>
  }

  export type postingUpsertWithWhereUniqueWithoutImagesInput = {
    where: postingWhereUniqueInput
    update: XOR<postingUpdateWithoutImagesInput, postingUncheckedUpdateWithoutImagesInput>
    create: XOR<postingCreateWithoutImagesInput, postingUncheckedCreateWithoutImagesInput>
  }

  export type postingUpdateWithWhereUniqueWithoutImagesInput = {
    where: postingWhereUniqueInput
    data: XOR<postingUpdateWithoutImagesInput, postingUncheckedUpdateWithoutImagesInput>
  }

  export type postingUpdateManyWithWhereWithoutImagesInput = {
    where: postingScalarWhereInput
    data: XOR<postingUpdateManyMutationInput, postingUncheckedUpdateManyWithoutImagesInput>
  }

  export type userCreateWithoutChatRoomAsFirstUserInput = {
    user_id?: string
    email: string
    name: string
    password: string
    date_joined: Date | string
    height: number
    weight: number
    postings?: postingCreateNestedManyWithoutUploaderInput
    messages?: messageCreateNestedManyWithoutSenderInput
    chatRoomAsSecondUser?: chatRoomCreateNestedManyWithoutSecond_userInput
  }

  export type userUncheckedCreateWithoutChatRoomAsFirstUserInput = {
    user_id?: string
    email: string
    name: string
    password: string
    date_joined: Date | string
    height: number
    weight: number
    postings?: postingUncheckedCreateNestedManyWithoutUploaderInput
    messages?: messageUncheckedCreateNestedManyWithoutSenderInput
    chatRoomAsSecondUser?: chatRoomUncheckedCreateNestedManyWithoutSecond_userInput
  }

  export type userCreateOrConnectWithoutChatRoomAsFirstUserInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutChatRoomAsFirstUserInput, userUncheckedCreateWithoutChatRoomAsFirstUserInput>
  }

  export type userCreateWithoutChatRoomAsSecondUserInput = {
    user_id?: string
    email: string
    name: string
    password: string
    date_joined: Date | string
    height: number
    weight: number
    postings?: postingCreateNestedManyWithoutUploaderInput
    messages?: messageCreateNestedManyWithoutSenderInput
    chatRoomAsFirstUser?: chatRoomCreateNestedManyWithoutFirst_userInput
  }

  export type userUncheckedCreateWithoutChatRoomAsSecondUserInput = {
    user_id?: string
    email: string
    name: string
    password: string
    date_joined: Date | string
    height: number
    weight: number
    postings?: postingUncheckedCreateNestedManyWithoutUploaderInput
    messages?: messageUncheckedCreateNestedManyWithoutSenderInput
    chatRoomAsFirstUser?: chatRoomUncheckedCreateNestedManyWithoutFirst_userInput
  }

  export type userCreateOrConnectWithoutChatRoomAsSecondUserInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutChatRoomAsSecondUserInput, userUncheckedCreateWithoutChatRoomAsSecondUserInput>
  }

  export type messageCreateWithoutChatRoomInput = {
    message_id?: string
    content: string
    timestamp?: Date | string
    sender: userCreateNestedOneWithoutMessagesInput
  }

  export type messageUncheckedCreateWithoutChatRoomInput = {
    message_id?: string
    sender_id: string
    content: string
    timestamp?: Date | string
  }

  export type messageCreateOrConnectWithoutChatRoomInput = {
    where: messageWhereUniqueInput
    create: XOR<messageCreateWithoutChatRoomInput, messageUncheckedCreateWithoutChatRoomInput>
  }

  export type messageCreateManyChatRoomInputEnvelope = {
    data: messageCreateManyChatRoomInput | messageCreateManyChatRoomInput[]
    skipDuplicates?: boolean
  }

  export type userUpsertWithoutChatRoomAsFirstUserInput = {
    update: XOR<userUpdateWithoutChatRoomAsFirstUserInput, userUncheckedUpdateWithoutChatRoomAsFirstUserInput>
    create: XOR<userCreateWithoutChatRoomAsFirstUserInput, userUncheckedCreateWithoutChatRoomAsFirstUserInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutChatRoomAsFirstUserInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutChatRoomAsFirstUserInput, userUncheckedUpdateWithoutChatRoomAsFirstUserInput>
  }

  export type userUpdateWithoutChatRoomAsFirstUserInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    postings?: postingUpdateManyWithoutUploaderNestedInput
    messages?: messageUpdateManyWithoutSenderNestedInput
    chatRoomAsSecondUser?: chatRoomUpdateManyWithoutSecond_userNestedInput
  }

  export type userUncheckedUpdateWithoutChatRoomAsFirstUserInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    postings?: postingUncheckedUpdateManyWithoutUploaderNestedInput
    messages?: messageUncheckedUpdateManyWithoutSenderNestedInput
    chatRoomAsSecondUser?: chatRoomUncheckedUpdateManyWithoutSecond_userNestedInput
  }

  export type userUpsertWithoutChatRoomAsSecondUserInput = {
    update: XOR<userUpdateWithoutChatRoomAsSecondUserInput, userUncheckedUpdateWithoutChatRoomAsSecondUserInput>
    create: XOR<userCreateWithoutChatRoomAsSecondUserInput, userUncheckedCreateWithoutChatRoomAsSecondUserInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutChatRoomAsSecondUserInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutChatRoomAsSecondUserInput, userUncheckedUpdateWithoutChatRoomAsSecondUserInput>
  }

  export type userUpdateWithoutChatRoomAsSecondUserInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    postings?: postingUpdateManyWithoutUploaderNestedInput
    messages?: messageUpdateManyWithoutSenderNestedInput
    chatRoomAsFirstUser?: chatRoomUpdateManyWithoutFirst_userNestedInput
  }

  export type userUncheckedUpdateWithoutChatRoomAsSecondUserInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    postings?: postingUncheckedUpdateManyWithoutUploaderNestedInput
    messages?: messageUncheckedUpdateManyWithoutSenderNestedInput
    chatRoomAsFirstUser?: chatRoomUncheckedUpdateManyWithoutFirst_userNestedInput
  }

  export type messageUpsertWithWhereUniqueWithoutChatRoomInput = {
    where: messageWhereUniqueInput
    update: XOR<messageUpdateWithoutChatRoomInput, messageUncheckedUpdateWithoutChatRoomInput>
    create: XOR<messageCreateWithoutChatRoomInput, messageUncheckedCreateWithoutChatRoomInput>
  }

  export type messageUpdateWithWhereUniqueWithoutChatRoomInput = {
    where: messageWhereUniqueInput
    data: XOR<messageUpdateWithoutChatRoomInput, messageUncheckedUpdateWithoutChatRoomInput>
  }

  export type messageUpdateManyWithWhereWithoutChatRoomInput = {
    where: messageScalarWhereInput
    data: XOR<messageUpdateManyMutationInput, messageUncheckedUpdateManyWithoutChatRoomInput>
  }

  export type chatRoomCreateWithoutMessagesInput = {
    room_id?: string
    first_user: userCreateNestedOneWithoutChatRoomAsFirstUserInput
    second_user: userCreateNestedOneWithoutChatRoomAsSecondUserInput
  }

  export type chatRoomUncheckedCreateWithoutMessagesInput = {
    room_id?: string
    first_user_id: string
    second_user_id: string
  }

  export type chatRoomCreateOrConnectWithoutMessagesInput = {
    where: chatRoomWhereUniqueInput
    create: XOR<chatRoomCreateWithoutMessagesInput, chatRoomUncheckedCreateWithoutMessagesInput>
  }

  export type userCreateWithoutMessagesInput = {
    user_id?: string
    email: string
    name: string
    password: string
    date_joined: Date | string
    height: number
    weight: number
    postings?: postingCreateNestedManyWithoutUploaderInput
    chatRoomAsFirstUser?: chatRoomCreateNestedManyWithoutFirst_userInput
    chatRoomAsSecondUser?: chatRoomCreateNestedManyWithoutSecond_userInput
  }

  export type userUncheckedCreateWithoutMessagesInput = {
    user_id?: string
    email: string
    name: string
    password: string
    date_joined: Date | string
    height: number
    weight: number
    postings?: postingUncheckedCreateNestedManyWithoutUploaderInput
    chatRoomAsFirstUser?: chatRoomUncheckedCreateNestedManyWithoutFirst_userInput
    chatRoomAsSecondUser?: chatRoomUncheckedCreateNestedManyWithoutSecond_userInput
  }

  export type userCreateOrConnectWithoutMessagesInput = {
    where: userWhereUniqueInput
    create: XOR<userCreateWithoutMessagesInput, userUncheckedCreateWithoutMessagesInput>
  }

  export type chatRoomUpsertWithoutMessagesInput = {
    update: XOR<chatRoomUpdateWithoutMessagesInput, chatRoomUncheckedUpdateWithoutMessagesInput>
    create: XOR<chatRoomCreateWithoutMessagesInput, chatRoomUncheckedCreateWithoutMessagesInput>
    where?: chatRoomWhereInput
  }

  export type chatRoomUpdateToOneWithWhereWithoutMessagesInput = {
    where?: chatRoomWhereInput
    data: XOR<chatRoomUpdateWithoutMessagesInput, chatRoomUncheckedUpdateWithoutMessagesInput>
  }

  export type chatRoomUpdateWithoutMessagesInput = {
    room_id?: StringFieldUpdateOperationsInput | string
    first_user?: userUpdateOneRequiredWithoutChatRoomAsFirstUserNestedInput
    second_user?: userUpdateOneRequiredWithoutChatRoomAsSecondUserNestedInput
  }

  export type chatRoomUncheckedUpdateWithoutMessagesInput = {
    room_id?: StringFieldUpdateOperationsInput | string
    first_user_id?: StringFieldUpdateOperationsInput | string
    second_user_id?: StringFieldUpdateOperationsInput | string
  }

  export type userUpsertWithoutMessagesInput = {
    update: XOR<userUpdateWithoutMessagesInput, userUncheckedUpdateWithoutMessagesInput>
    create: XOR<userCreateWithoutMessagesInput, userUncheckedCreateWithoutMessagesInput>
    where?: userWhereInput
  }

  export type userUpdateToOneWithWhereWithoutMessagesInput = {
    where?: userWhereInput
    data: XOR<userUpdateWithoutMessagesInput, userUncheckedUpdateWithoutMessagesInput>
  }

  export type userUpdateWithoutMessagesInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    postings?: postingUpdateManyWithoutUploaderNestedInput
    chatRoomAsFirstUser?: chatRoomUpdateManyWithoutFirst_userNestedInput
    chatRoomAsSecondUser?: chatRoomUpdateManyWithoutSecond_userNestedInput
  }

  export type userUncheckedUpdateWithoutMessagesInput = {
    user_id?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    date_joined?: DateTimeFieldUpdateOperationsInput | Date | string
    height?: IntFieldUpdateOperationsInput | number
    weight?: IntFieldUpdateOperationsInput | number
    postings?: postingUncheckedUpdateManyWithoutUploaderNestedInput
    chatRoomAsFirstUser?: chatRoomUncheckedUpdateManyWithoutFirst_userNestedInput
    chatRoomAsSecondUser?: chatRoomUncheckedUpdateManyWithoutSecond_userNestedInput
  }

  export type postingCreateManyUploaderInput = {
    post_id?: string
    text: string
    date_created: Date | string
    semester?: string | null
  }

  export type messageCreateManySenderInput = {
    message_id?: string
    room_id: string
    content: string
    timestamp?: Date | string
  }

  export type chatRoomCreateManyFirst_userInput = {
    room_id?: string
    second_user_id: string
  }

  export type chatRoomCreateManySecond_userInput = {
    room_id?: string
    first_user_id: string
  }

  export type postingUpdateWithoutUploaderInput = {
    post_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ImageUpdateManyWithoutPostingNestedInput
  }

  export type postingUncheckedUpdateWithoutUploaderInput = {
    post_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    images?: ImageUncheckedUpdateManyWithoutPostingNestedInput
  }

  export type postingUncheckedUpdateManyWithoutUploaderInput = {
    post_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    semester?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type messageUpdateWithoutSenderInput = {
    message_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    chatRoom?: chatRoomUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type messageUncheckedUpdateWithoutSenderInput = {
    message_id?: StringFieldUpdateOperationsInput | string
    room_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messageUncheckedUpdateManyWithoutSenderInput = {
    message_id?: StringFieldUpdateOperationsInput | string
    room_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type chatRoomUpdateWithoutFirst_userInput = {
    room_id?: StringFieldUpdateOperationsInput | string
    second_user?: userUpdateOneRequiredWithoutChatRoomAsSecondUserNestedInput
    messages?: messageUpdateManyWithoutChatRoomNestedInput
  }

  export type chatRoomUncheckedUpdateWithoutFirst_userInput = {
    room_id?: StringFieldUpdateOperationsInput | string
    second_user_id?: StringFieldUpdateOperationsInput | string
    messages?: messageUncheckedUpdateManyWithoutChatRoomNestedInput
  }

  export type chatRoomUncheckedUpdateManyWithoutFirst_userInput = {
    room_id?: StringFieldUpdateOperationsInput | string
    second_user_id?: StringFieldUpdateOperationsInput | string
  }

  export type chatRoomUpdateWithoutSecond_userInput = {
    room_id?: StringFieldUpdateOperationsInput | string
    first_user?: userUpdateOneRequiredWithoutChatRoomAsFirstUserNestedInput
    messages?: messageUpdateManyWithoutChatRoomNestedInput
  }

  export type chatRoomUncheckedUpdateWithoutSecond_userInput = {
    room_id?: StringFieldUpdateOperationsInput | string
    first_user_id?: StringFieldUpdateOperationsInput | string
    messages?: messageUncheckedUpdateManyWithoutChatRoomNestedInput
  }

  export type chatRoomUncheckedUpdateManyWithoutSecond_userInput = {
    room_id?: StringFieldUpdateOperationsInput | string
    first_user_id?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUpdateWithoutPostingInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUncheckedUpdateWithoutPostingInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUncheckedUpdateManyWithoutPostingInput = {
    id?: StringFieldUpdateOperationsInput | string
    imageUrl?: StringFieldUpdateOperationsInput | string
  }

  export type postingUpdateWithoutImagesInput = {
    post_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    semester?: NullableStringFieldUpdateOperationsInput | string | null
    uploader?: userUpdateOneRequiredWithoutPostingsNestedInput
  }

  export type postingUncheckedUpdateWithoutImagesInput = {
    post_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    semester?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type postingUncheckedUpdateManyWithoutImagesInput = {
    post_id?: StringFieldUpdateOperationsInput | string
    user_id?: StringFieldUpdateOperationsInput | string
    text?: StringFieldUpdateOperationsInput | string
    date_created?: DateTimeFieldUpdateOperationsInput | Date | string
    semester?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type messageCreateManyChatRoomInput = {
    message_id?: string
    sender_id: string
    content: string
    timestamp?: Date | string
  }

  export type messageUpdateWithoutChatRoomInput = {
    message_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
    sender?: userUpdateOneRequiredWithoutMessagesNestedInput
  }

  export type messageUncheckedUpdateWithoutChatRoomInput = {
    message_id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type messageUncheckedUpdateManyWithoutChatRoomInput = {
    message_id?: StringFieldUpdateOperationsInput | string
    sender_id?: StringFieldUpdateOperationsInput | string
    content?: StringFieldUpdateOperationsInput | string
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostingCountOutputTypeDefaultArgs instead
     */
    export type PostingCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostingCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ImageCountOutputTypeDefaultArgs instead
     */
    export type ImageCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ImageCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ChatRoomCountOutputTypeDefaultArgs instead
     */
    export type ChatRoomCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ChatRoomCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userDefaultArgs instead
     */
    export type userArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = userDefaultArgs<ExtArgs>
    /**
     * @deprecated Use postingDefaultArgs instead
     */
    export type postingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = postingDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ImageDefaultArgs instead
     */
    export type ImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ImageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use chatRoomDefaultArgs instead
     */
    export type chatRoomArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = chatRoomDefaultArgs<ExtArgs>
    /**
     * @deprecated Use messageDefaultArgs instead
     */
    export type messageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = messageDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}