// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model user {
  user_id      String      @id @default(uuid())
  email   String   @unique
  name    String
  password  String
  date_joined   DateTime
  height    Int
  weight    Int
  postings posting[]
  messages message[]
  chatRoomAsFirstUser chatRoom[] @relation("UserAtFirst")
  chatRoomAsSecondUser chatRoom[] @relation("UserAtSecond")
}

model posting {
  uploader  user     @relation(fields: [user_id], references: [user_id])
  user_id   String   @unique
  post_id   String   @id @default(uuid())
  images    Image[]
  text      String
  date_created  DateTime
  semester  String?
}

model Image {
    id      String      @id @default(uuid())
    imageUrl     String
    posting posting[]
}

model chatRoom {
    room_id     String     @id @default(uuid())
    first_user  user    @relation("UserAtFirst", fields: [first_user_id], references: [user_id])
    first_user_id   String
    second_user  user   @relation("UserAtSecond", fields: [second_user_id], references: [user_id])
    second_user_id  String
    messages    message[]

    @@unique([first_user_id, second_user_id])
}

model message {
    message_id  String      @id @default(uuid())
    chatRoom    chatRoom    @relation(fields: [room_id], references: [room_id])
    room_id     String
    sender      user        @relation(fields: [sender_id], references: [user_id])
    sender_id   String
    content     String
    timestamp   DateTime    @default(now())
}